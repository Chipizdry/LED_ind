
LED-Ind.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026b4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002774  08002774  00012774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002790  08002790  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002790  08002790  00012790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002798  08002798  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002798  08002798  00012798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800279c  0800279c  0001279c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000010  080027ac  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080027ac  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000055bb  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001436  00000000  00000000  000255ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000580  00000000  00000000  00026a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004c8  00000000  00000000  00026fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fe94  00000000  00000000  00027470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000071f4  00000000  00000000  00037304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060aa4  00000000  00000000  0003e4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009ef9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001224  00000000  00000000  0009efec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800275c 	.word	0x0800275c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800275c 	.word	0x0800275c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fe52 	bl	8001154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 fbf6 	bl	8000ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 fcb6 	bl	8000e24 <MX_GPIO_Init>
  MX_ADC_Init();
 80004b8:	f000 fc4e 	bl	8000d58 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  LED_ENABLE;
 80004bc:	23a0      	movs	r3, #160	; 0xa0
 80004be:	05db      	lsls	r3, r3, #23
 80004c0:	2201      	movs	r2, #1
 80004c2:	2101      	movs	r1, #1
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 fb0d 	bl	8001ae4 <HAL_GPIO_WritePin>

	LED_10_MIN_ON;
 80004ca:	4bde      	ldr	r3, [pc, #888]	; (8000844 <main+0x39c>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	2140      	movs	r1, #64	; 0x40
 80004d0:	0018      	movs	r0, r3
 80004d2:	f001 fb07 	bl	8001ae4 <HAL_GPIO_WritePin>

	HAL_Delay(200);
 80004d6:	20c8      	movs	r0, #200	; 0xc8
 80004d8:	f000 feac 	bl	8001234 <HAL_Delay>

	LED_20_MIN_ON;
 80004dc:	23a0      	movs	r3, #160	; 0xa0
 80004de:	05db      	lsls	r3, r3, #23
 80004e0:	2201      	movs	r2, #1
 80004e2:	2120      	movs	r1, #32
 80004e4:	0018      	movs	r0, r3
 80004e6:	f001 fafd 	bl	8001ae4 <HAL_GPIO_WritePin>

	HAL_Delay(200);
 80004ea:	20c8      	movs	r0, #200	; 0xc8
 80004ec:	f000 fea2 	bl	8001234 <HAL_Delay>

	LED_30_MIN_ON;
 80004f0:	23a0      	movs	r3, #160	; 0xa0
 80004f2:	05db      	lsls	r3, r3, #23
 80004f4:	2201      	movs	r2, #1
 80004f6:	2180      	movs	r1, #128	; 0x80
 80004f8:	0018      	movs	r0, r3
 80004fa:	f001 faf3 	bl	8001ae4 <HAL_GPIO_WritePin>

	HAL_Delay(200);
 80004fe:	20c8      	movs	r0, #200	; 0xc8
 8000500:	f000 fe98 	bl	8001234 <HAL_Delay>

	LED_40_MIN_ON;
 8000504:	2380      	movs	r3, #128	; 0x80
 8000506:	0099      	lsls	r1, r3, #2
 8000508:	23a0      	movs	r3, #160	; 0xa0
 800050a:	05db      	lsls	r3, r3, #23
 800050c:	2201      	movs	r2, #1
 800050e:	0018      	movs	r0, r3
 8000510:	f001 fae8 	bl	8001ae4 <HAL_GPIO_WritePin>

	HAL_Delay(200);
 8000514:	20c8      	movs	r0, #200	; 0xc8
 8000516:	f000 fe8d 	bl	8001234 <HAL_Delay>

	LED_50_MIN_ON;
 800051a:	4bca      	ldr	r3, [pc, #808]	; (8000844 <main+0x39c>)
 800051c:	2201      	movs	r2, #1
 800051e:	2102      	movs	r1, #2
 8000520:	0018      	movs	r0, r3
 8000522:	f001 fadf 	bl	8001ae4 <HAL_GPIO_WritePin>

	HAL_Delay(200);
 8000526:	20c8      	movs	r0, #200	; 0xc8
 8000528:	f000 fe84 	bl	8001234 <HAL_Delay>

	LED_60_MIN_ON;
 800052c:	2380      	movs	r3, #128	; 0x80
 800052e:	01db      	lsls	r3, r3, #7
 8000530:	48c5      	ldr	r0, [pc, #788]	; (8000848 <main+0x3a0>)
 8000532:	2201      	movs	r2, #1
 8000534:	0019      	movs	r1, r3
 8000536:	f001 fad5 	bl	8001ae4 <HAL_GPIO_WritePin>

	HAL_Delay(200);
 800053a:	20c8      	movs	r0, #200	; 0xc8
 800053c:	f000 fe7a 	bl	8001234 <HAL_Delay>

	LED_1_HOUR_ON;
 8000540:	4bc0      	ldr	r3, [pc, #768]	; (8000844 <main+0x39c>)
 8000542:	2201      	movs	r2, #1
 8000544:	2180      	movs	r1, #128	; 0x80
 8000546:	0018      	movs	r0, r3
 8000548:	f001 facc 	bl	8001ae4 <HAL_GPIO_WritePin>

	HAL_Delay(200);
 800054c:	20c8      	movs	r0, #200	; 0xc8
 800054e:	f000 fe71 	bl	8001234 <HAL_Delay>

	LED_2_HOUR_ON;
 8000552:	2380      	movs	r3, #128	; 0x80
 8000554:	00d9      	lsls	r1, r3, #3
 8000556:	23a0      	movs	r3, #160	; 0xa0
 8000558:	05db      	lsls	r3, r3, #23
 800055a:	2201      	movs	r2, #1
 800055c:	0018      	movs	r0, r3
 800055e:	f001 fac1 	bl	8001ae4 <HAL_GPIO_WritePin>

	HAL_Delay(200);
 8000562:	20c8      	movs	r0, #200	; 0xc8
 8000564:	f000 fe66 	bl	8001234 <HAL_Delay>

	LED_3_HOUR_ON;
 8000568:	2380      	movs	r3, #128	; 0x80
 800056a:	021b      	lsls	r3, r3, #8
 800056c:	48b6      	ldr	r0, [pc, #728]	; (8000848 <main+0x3a0>)
 800056e:	2201      	movs	r2, #1
 8000570:	0019      	movs	r1, r3
 8000572:	f001 fab7 	bl	8001ae4 <HAL_GPIO_WritePin>

	HAL_Delay(800);
 8000576:	23c8      	movs	r3, #200	; 0xc8
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	0018      	movs	r0, r3
 800057c:	f000 fe5a 	bl	8001234 <HAL_Delay>

	LED_10_MIN_OFF;
 8000580:	4bb0      	ldr	r3, [pc, #704]	; (8000844 <main+0x39c>)
 8000582:	2200      	movs	r2, #0
 8000584:	2140      	movs	r1, #64	; 0x40
 8000586:	0018      	movs	r0, r3
 8000588:	f001 faac 	bl	8001ae4 <HAL_GPIO_WritePin>
	LED_20_MIN_OFF;
 800058c:	23a0      	movs	r3, #160	; 0xa0
 800058e:	05db      	lsls	r3, r3, #23
 8000590:	2200      	movs	r2, #0
 8000592:	2120      	movs	r1, #32
 8000594:	0018      	movs	r0, r3
 8000596:	f001 faa5 	bl	8001ae4 <HAL_GPIO_WritePin>
	LED_30_MIN_OFF;
 800059a:	23a0      	movs	r3, #160	; 0xa0
 800059c:	05db      	lsls	r3, r3, #23
 800059e:	2200      	movs	r2, #0
 80005a0:	2180      	movs	r1, #128	; 0x80
 80005a2:	0018      	movs	r0, r3
 80005a4:	f001 fa9e 	bl	8001ae4 <HAL_GPIO_WritePin>
	LED_40_MIN_OFF;
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	0099      	lsls	r1, r3, #2
 80005ac:	23a0      	movs	r3, #160	; 0xa0
 80005ae:	05db      	lsls	r3, r3, #23
 80005b0:	2200      	movs	r2, #0
 80005b2:	0018      	movs	r0, r3
 80005b4:	f001 fa96 	bl	8001ae4 <HAL_GPIO_WritePin>
	LED_50_MIN_OFF;
 80005b8:	4ba2      	ldr	r3, [pc, #648]	; (8000844 <main+0x39c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	2102      	movs	r1, #2
 80005be:	0018      	movs	r0, r3
 80005c0:	f001 fa90 	bl	8001ae4 <HAL_GPIO_WritePin>
	LED_60_MIN_OFF;
 80005c4:	2380      	movs	r3, #128	; 0x80
 80005c6:	01db      	lsls	r3, r3, #7
 80005c8:	489f      	ldr	r0, [pc, #636]	; (8000848 <main+0x3a0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	0019      	movs	r1, r3
 80005ce:	f001 fa89 	bl	8001ae4 <HAL_GPIO_WritePin>
    LED_1_HOUR_OFF;
 80005d2:	4b9c      	ldr	r3, [pc, #624]	; (8000844 <main+0x39c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	2180      	movs	r1, #128	; 0x80
 80005d8:	0018      	movs	r0, r3
 80005da:	f001 fa83 	bl	8001ae4 <HAL_GPIO_WritePin>
    LED_2_HOUR_OFF;
 80005de:	2380      	movs	r3, #128	; 0x80
 80005e0:	00d9      	lsls	r1, r3, #3
 80005e2:	23a0      	movs	r3, #160	; 0xa0
 80005e4:	05db      	lsls	r3, r3, #23
 80005e6:	2200      	movs	r2, #0
 80005e8:	0018      	movs	r0, r3
 80005ea:	f001 fa7b 	bl	8001ae4 <HAL_GPIO_WritePin>
    LED_3_HOUR_OFF;
 80005ee:	2380      	movs	r3, #128	; 0x80
 80005f0:	021b      	lsls	r3, r3, #8
 80005f2:	4895      	ldr	r0, [pc, #596]	; (8000848 <main+0x3a0>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	0019      	movs	r1, r3
 80005f8:	f001 fa74 	bl	8001ae4 <HAL_GPIO_WritePin>
    ALL_ON;
    HAL_Delay(500);
    ALL_OFF;
*/

    HAL_Delay(500);
 80005fc:	23fa      	movs	r3, #250	; 0xfa
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	0018      	movs	r0, r3
 8000602:	f000 fe17 	bl	8001234 <HAL_Delay>
  dl=50;
 8000606:	4b91      	ldr	r3, [pc, #580]	; (800084c <main+0x3a4>)
 8000608:	2232      	movs	r2, #50	; 0x32
 800060a:	601a      	str	r2, [r3, #0]
  LED_ENABLE;
 800060c:	23a0      	movs	r3, #160	; 0xa0
 800060e:	05db      	lsls	r3, r3, #23
 8000610:	2201      	movs	r2, #1
 8000612:	2101      	movs	r1, #1
 8000614:	0018      	movs	r0, r3
 8000616:	f001 fa65 	bl	8001ae4 <HAL_GPIO_WritePin>
  while (1)
  {



	 LED_PWM_ON;
 800061a:	23a0      	movs	r3, #160	; 0xa0
 800061c:	05db      	lsls	r3, r3, #23
 800061e:	2201      	movs	r2, #1
 8000620:	2102      	movs	r1, #2
 8000622:	0018      	movs	r0, r3
 8000624:	f001 fa5e 	bl	8001ae4 <HAL_GPIO_WritePin>

	                      LED_10_MIN_OFF;
 8000628:	4b86      	ldr	r3, [pc, #536]	; (8000844 <main+0x39c>)
 800062a:	2200      	movs	r2, #0
 800062c:	2140      	movs	r1, #64	; 0x40
 800062e:	0018      	movs	r0, r3
 8000630:	f001 fa58 	bl	8001ae4 <HAL_GPIO_WritePin>
					      LED_20_MIN_OFF;
 8000634:	23a0      	movs	r3, #160	; 0xa0
 8000636:	05db      	lsls	r3, r3, #23
 8000638:	2200      	movs	r2, #0
 800063a:	2120      	movs	r1, #32
 800063c:	0018      	movs	r0, r3
 800063e:	f001 fa51 	bl	8001ae4 <HAL_GPIO_WritePin>
				          LED_30_MIN_OFF;
 8000642:	23a0      	movs	r3, #160	; 0xa0
 8000644:	05db      	lsls	r3, r3, #23
 8000646:	2200      	movs	r2, #0
 8000648:	2180      	movs	r1, #128	; 0x80
 800064a:	0018      	movs	r0, r3
 800064c:	f001 fa4a 	bl	8001ae4 <HAL_GPIO_WritePin>
				          LED_40_MIN_OFF;
 8000650:	2380      	movs	r3, #128	; 0x80
 8000652:	0099      	lsls	r1, r3, #2
 8000654:	23a0      	movs	r3, #160	; 0xa0
 8000656:	05db      	lsls	r3, r3, #23
 8000658:	2200      	movs	r2, #0
 800065a:	0018      	movs	r0, r3
 800065c:	f001 fa42 	bl	8001ae4 <HAL_GPIO_WritePin>
					      LED_50_MIN_OFF;
 8000660:	4b78      	ldr	r3, [pc, #480]	; (8000844 <main+0x39c>)
 8000662:	2200      	movs	r2, #0
 8000664:	2102      	movs	r1, #2
 8000666:	0018      	movs	r0, r3
 8000668:	f001 fa3c 	bl	8001ae4 <HAL_GPIO_WritePin>
				          LED_60_MIN_OFF;
 800066c:	2380      	movs	r3, #128	; 0x80
 800066e:	01db      	lsls	r3, r3, #7
 8000670:	4875      	ldr	r0, [pc, #468]	; (8000848 <main+0x3a0>)
 8000672:	2200      	movs	r2, #0
 8000674:	0019      	movs	r1, r3
 8000676:	f001 fa35 	bl	8001ae4 <HAL_GPIO_WritePin>
					      LED_1_HOUR_OFF;
 800067a:	4b72      	ldr	r3, [pc, #456]	; (8000844 <main+0x39c>)
 800067c:	2200      	movs	r2, #0
 800067e:	2180      	movs	r1, #128	; 0x80
 8000680:	0018      	movs	r0, r3
 8000682:	f001 fa2f 	bl	8001ae4 <HAL_GPIO_WritePin>
					      LED_2_HOUR_OFF;
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	00d9      	lsls	r1, r3, #3
 800068a:	23a0      	movs	r3, #160	; 0xa0
 800068c:	05db      	lsls	r3, r3, #23
 800068e:	2200      	movs	r2, #0
 8000690:	0018      	movs	r0, r3
 8000692:	f001 fa27 	bl	8001ae4 <HAL_GPIO_WritePin>
				          LED_3_HOUR_OFF;
 8000696:	2380      	movs	r3, #128	; 0x80
 8000698:	021b      	lsls	r3, r3, #8
 800069a:	486b      	ldr	r0, [pc, #428]	; (8000848 <main+0x3a0>)
 800069c:	2200      	movs	r2, #0
 800069e:	0019      	movs	r1, r3
 80006a0:	f001 fa20 	bl	8001ae4 <HAL_GPIO_WritePin>

	                      count++;
 80006a4:	4b6a      	ldr	r3, [pc, #424]	; (8000850 <main+0x3a8>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	2001      	movs	r0, #1
 80006ac:	2100      	movs	r1, #0
 80006ae:	1812      	adds	r2, r2, r0
 80006b0:	414b      	adcs	r3, r1
 80006b2:	4967      	ldr	r1, [pc, #412]	; (8000850 <main+0x3a8>)
 80006b4:	600a      	str	r2, [r1, #0]
 80006b6:	604b      	str	r3, [r1, #4]

	                      scene=count/KOEFF;
 80006b8:	4b65      	ldr	r3, [pc, #404]	; (8000850 <main+0x3a8>)
 80006ba:	6818      	ldr	r0, [r3, #0]
 80006bc:	6859      	ldr	r1, [r3, #4]
 80006be:	4a65      	ldr	r2, [pc, #404]	; (8000854 <main+0x3ac>)
 80006c0:	2300      	movs	r3, #0
 80006c2:	f7ff fdad 	bl	8000220 <__aeabi_uldivmod>
 80006c6:	0002      	movs	r2, r0
 80006c8:	000b      	movs	r3, r1
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	4b62      	ldr	r3, [pc, #392]	; (8000858 <main+0x3b0>)
 80006ce:	701a      	strb	r2, [r3, #0]
	                      if(hour==4){scene=0;count=0;hour=0;}
 80006d0:	4b62      	ldr	r3, [pc, #392]	; (800085c <main+0x3b4>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b04      	cmp	r3, #4
 80006d6:	d10a      	bne.n	80006ee <main+0x246>
 80006d8:	4b5f      	ldr	r3, [pc, #380]	; (8000858 <main+0x3b0>)
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]
 80006de:	495c      	ldr	r1, [pc, #368]	; (8000850 <main+0x3a8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	2300      	movs	r3, #0
 80006e4:	600a      	str	r2, [r1, #0]
 80006e6:	604b      	str	r3, [r1, #4]
 80006e8:	4b5c      	ldr	r3, [pc, #368]	; (800085c <main+0x3b4>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
	//  Delay(dl);
	  LED_PWM_OFF;
 80006ee:	23a0      	movs	r3, #160	; 0xa0
 80006f0:	05db      	lsls	r3, r3, #23
 80006f2:	2200      	movs	r2, #0
 80006f4:	2102      	movs	r1, #2
 80006f6:	0018      	movs	r0, r3
 80006f8:	f001 f9f4 	bl	8001ae4 <HAL_GPIO_WritePin>

                blink++;
 80006fc:	4b58      	ldr	r3, [pc, #352]	; (8000860 <main+0x3b8>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	3301      	adds	r3, #1
 8000702:	b29a      	uxth	r2, r3
 8000704:	4b56      	ldr	r3, [pc, #344]	; (8000860 <main+0x3b8>)
 8000706:	801a      	strh	r2, [r3, #0]

                if(blink>BLNK){blink=0;}
 8000708:	4b55      	ldr	r3, [pc, #340]	; (8000860 <main+0x3b8>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	4a55      	ldr	r2, [pc, #340]	; (8000864 <main+0x3bc>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d902      	bls.n	8000718 <main+0x270>
 8000712:	4b53      	ldr	r3, [pc, #332]	; (8000860 <main+0x3b8>)
 8000714:	2200      	movs	r2, #0
 8000716:	801a      	strh	r2, [r3, #0]

				if((scene==0)||(scene==6)||(scene==12)||(scene==18)){ LED_10_MIN_ON;  if((blink>(BLNK/2))&&(blink<BLNK)){ LED_10_MIN_OFF; }}
 8000718:	4b4f      	ldr	r3, [pc, #316]	; (8000858 <main+0x3b0>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d00b      	beq.n	8000738 <main+0x290>
 8000720:	4b4d      	ldr	r3, [pc, #308]	; (8000858 <main+0x3b0>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b06      	cmp	r3, #6
 8000726:	d007      	beq.n	8000738 <main+0x290>
 8000728:	4b4b      	ldr	r3, [pc, #300]	; (8000858 <main+0x3b0>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b0c      	cmp	r3, #12
 800072e:	d003      	beq.n	8000738 <main+0x290>
 8000730:	4b49      	ldr	r3, [pc, #292]	; (8000858 <main+0x3b0>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b12      	cmp	r3, #18
 8000736:	d115      	bne.n	8000764 <main+0x2bc>
 8000738:	4b42      	ldr	r3, [pc, #264]	; (8000844 <main+0x39c>)
 800073a:	2201      	movs	r2, #1
 800073c:	2140      	movs	r1, #64	; 0x40
 800073e:	0018      	movs	r0, r3
 8000740:	f001 f9d0 	bl	8001ae4 <HAL_GPIO_WritePin>
 8000744:	4b46      	ldr	r3, [pc, #280]	; (8000860 <main+0x3b8>)
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	4a47      	ldr	r2, [pc, #284]	; (8000868 <main+0x3c0>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d90a      	bls.n	8000764 <main+0x2bc>
 800074e:	4b44      	ldr	r3, [pc, #272]	; (8000860 <main+0x3b8>)
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	4a46      	ldr	r2, [pc, #280]	; (800086c <main+0x3c4>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d805      	bhi.n	8000764 <main+0x2bc>
 8000758:	4b3a      	ldr	r3, [pc, #232]	; (8000844 <main+0x39c>)
 800075a:	2200      	movs	r2, #0
 800075c:	2140      	movs	r1, #64	; 0x40
 800075e:	0018      	movs	r0, r3
 8000760:	f001 f9c0 	bl	8001ae4 <HAL_GPIO_WritePin>

				if((scene==1)||(scene==7)||(scene==13)||(scene==19)){ LED_20_MIN_ON;  if((blink>(BLNK/2))&&(blink<BLNK)){ LED_20_MIN_OFF; }}
 8000764:	4b3c      	ldr	r3, [pc, #240]	; (8000858 <main+0x3b0>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d00b      	beq.n	8000784 <main+0x2dc>
 800076c:	4b3a      	ldr	r3, [pc, #232]	; (8000858 <main+0x3b0>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b07      	cmp	r3, #7
 8000772:	d007      	beq.n	8000784 <main+0x2dc>
 8000774:	4b38      	ldr	r3, [pc, #224]	; (8000858 <main+0x3b0>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b0d      	cmp	r3, #13
 800077a:	d003      	beq.n	8000784 <main+0x2dc>
 800077c:	4b36      	ldr	r3, [pc, #216]	; (8000858 <main+0x3b0>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b13      	cmp	r3, #19
 8000782:	d117      	bne.n	80007b4 <main+0x30c>
 8000784:	23a0      	movs	r3, #160	; 0xa0
 8000786:	05db      	lsls	r3, r3, #23
 8000788:	2201      	movs	r2, #1
 800078a:	2120      	movs	r1, #32
 800078c:	0018      	movs	r0, r3
 800078e:	f001 f9a9 	bl	8001ae4 <HAL_GPIO_WritePin>
 8000792:	4b33      	ldr	r3, [pc, #204]	; (8000860 <main+0x3b8>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	4a34      	ldr	r2, [pc, #208]	; (8000868 <main+0x3c0>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d90b      	bls.n	80007b4 <main+0x30c>
 800079c:	4b30      	ldr	r3, [pc, #192]	; (8000860 <main+0x3b8>)
 800079e:	881b      	ldrh	r3, [r3, #0]
 80007a0:	4a32      	ldr	r2, [pc, #200]	; (800086c <main+0x3c4>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d806      	bhi.n	80007b4 <main+0x30c>
 80007a6:	23a0      	movs	r3, #160	; 0xa0
 80007a8:	05db      	lsls	r3, r3, #23
 80007aa:	2200      	movs	r2, #0
 80007ac:	2120      	movs	r1, #32
 80007ae:	0018      	movs	r0, r3
 80007b0:	f001 f998 	bl	8001ae4 <HAL_GPIO_WritePin>

				if((scene==2)||(scene==8)||(scene==14)||(scene==20)){ LED_30_MIN_ON;  if((blink>(BLNK/2))&&(blink<BLNK)){ LED_30_MIN_OFF; }}
 80007b4:	4b28      	ldr	r3, [pc, #160]	; (8000858 <main+0x3b0>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d00b      	beq.n	80007d4 <main+0x32c>
 80007bc:	4b26      	ldr	r3, [pc, #152]	; (8000858 <main+0x3b0>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b08      	cmp	r3, #8
 80007c2:	d007      	beq.n	80007d4 <main+0x32c>
 80007c4:	4b24      	ldr	r3, [pc, #144]	; (8000858 <main+0x3b0>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b0e      	cmp	r3, #14
 80007ca:	d003      	beq.n	80007d4 <main+0x32c>
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <main+0x3b0>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b14      	cmp	r3, #20
 80007d2:	d117      	bne.n	8000804 <main+0x35c>
 80007d4:	23a0      	movs	r3, #160	; 0xa0
 80007d6:	05db      	lsls	r3, r3, #23
 80007d8:	2201      	movs	r2, #1
 80007da:	2180      	movs	r1, #128	; 0x80
 80007dc:	0018      	movs	r0, r3
 80007de:	f001 f981 	bl	8001ae4 <HAL_GPIO_WritePin>
 80007e2:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <main+0x3b8>)
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	4a20      	ldr	r2, [pc, #128]	; (8000868 <main+0x3c0>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d90b      	bls.n	8000804 <main+0x35c>
 80007ec:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <main+0x3b8>)
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	4a1e      	ldr	r2, [pc, #120]	; (800086c <main+0x3c4>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d806      	bhi.n	8000804 <main+0x35c>
 80007f6:	23a0      	movs	r3, #160	; 0xa0
 80007f8:	05db      	lsls	r3, r3, #23
 80007fa:	2200      	movs	r2, #0
 80007fc:	2180      	movs	r1, #128	; 0x80
 80007fe:	0018      	movs	r0, r3
 8000800:	f001 f970 	bl	8001ae4 <HAL_GPIO_WritePin>

				if((scene==3)||(scene==9)||(scene==15)||(scene==21)){ LED_40_MIN_ON;  if((blink>(BLNK/2))&&(blink<BLNK)){ LED_40_MIN_OFF; }}
 8000804:	4b14      	ldr	r3, [pc, #80]	; (8000858 <main+0x3b0>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b03      	cmp	r3, #3
 800080a:	d00b      	beq.n	8000824 <main+0x37c>
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <main+0x3b0>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b09      	cmp	r3, #9
 8000812:	d007      	beq.n	8000824 <main+0x37c>
 8000814:	4b10      	ldr	r3, [pc, #64]	; (8000858 <main+0x3b0>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b0f      	cmp	r3, #15
 800081a:	d003      	beq.n	8000824 <main+0x37c>
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <main+0x3b0>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b15      	cmp	r3, #21
 8000822:	d130      	bne.n	8000886 <main+0x3de>
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	0099      	lsls	r1, r3, #2
 8000828:	23a0      	movs	r3, #160	; 0xa0
 800082a:	05db      	lsls	r3, r3, #23
 800082c:	2201      	movs	r2, #1
 800082e:	0018      	movs	r0, r3
 8000830:	f001 f958 	bl	8001ae4 <HAL_GPIO_WritePin>
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <main+0x3b8>)
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	4a0b      	ldr	r2, [pc, #44]	; (8000868 <main+0x3c0>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d923      	bls.n	8000886 <main+0x3de>
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <main+0x3b8>)
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	e015      	b.n	8000870 <main+0x3c8>
 8000844:	50000400 	.word	0x50000400
 8000848:	50000800 	.word	0x50000800
 800084c:	20000088 	.word	0x20000088
 8000850:	20000090 	.word	0x20000090
 8000854:	008eab70 	.word	0x008eab70
 8000858:	20000098 	.word	0x20000098
 800085c:	20000099 	.word	0x20000099
 8000860:	2000009a 	.word	0x2000009a
 8000864:	00004650 	.word	0x00004650
 8000868:	00002328 	.word	0x00002328
 800086c:	0000464f 	.word	0x0000464f
 8000870:	4ae8      	ldr	r2, [pc, #928]	; (8000c14 <main+0x76c>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d807      	bhi.n	8000886 <main+0x3de>
 8000876:	2380      	movs	r3, #128	; 0x80
 8000878:	0099      	lsls	r1, r3, #2
 800087a:	23a0      	movs	r3, #160	; 0xa0
 800087c:	05db      	lsls	r3, r3, #23
 800087e:	2200      	movs	r2, #0
 8000880:	0018      	movs	r0, r3
 8000882:	f001 f92f 	bl	8001ae4 <HAL_GPIO_WritePin>

				if((scene==4)||(scene==10)||(scene==16)||(scene==22)){LED_50_MIN_ON;  if((blink>(BLNK/2))&&(blink<BLNK)){ LED_50_MIN_OFF; }}
 8000886:	4be4      	ldr	r3, [pc, #912]	; (8000c18 <main+0x770>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b04      	cmp	r3, #4
 800088c:	d00b      	beq.n	80008a6 <main+0x3fe>
 800088e:	4be2      	ldr	r3, [pc, #904]	; (8000c18 <main+0x770>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b0a      	cmp	r3, #10
 8000894:	d007      	beq.n	80008a6 <main+0x3fe>
 8000896:	4be0      	ldr	r3, [pc, #896]	; (8000c18 <main+0x770>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b10      	cmp	r3, #16
 800089c:	d003      	beq.n	80008a6 <main+0x3fe>
 800089e:	4bde      	ldr	r3, [pc, #888]	; (8000c18 <main+0x770>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b16      	cmp	r3, #22
 80008a4:	d115      	bne.n	80008d2 <main+0x42a>
 80008a6:	4bdd      	ldr	r3, [pc, #884]	; (8000c1c <main+0x774>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	2102      	movs	r1, #2
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 f919 	bl	8001ae4 <HAL_GPIO_WritePin>
 80008b2:	4bdb      	ldr	r3, [pc, #876]	; (8000c20 <main+0x778>)
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	4adb      	ldr	r2, [pc, #876]	; (8000c24 <main+0x77c>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d90a      	bls.n	80008d2 <main+0x42a>
 80008bc:	4bd8      	ldr	r3, [pc, #864]	; (8000c20 <main+0x778>)
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	4ad4      	ldr	r2, [pc, #848]	; (8000c14 <main+0x76c>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d805      	bhi.n	80008d2 <main+0x42a>
 80008c6:	4bd5      	ldr	r3, [pc, #852]	; (8000c1c <main+0x774>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	2102      	movs	r1, #2
 80008cc:	0018      	movs	r0, r3
 80008ce:	f001 f909 	bl	8001ae4 <HAL_GPIO_WritePin>

				if((scene==5)||(scene==11)||(scene==17)||(scene==23)){LED_60_MIN_ON;  if((blink>(BLNK/2))&&(blink<BLNK)){ LED_60_MIN_OFF; }}
 80008d2:	4bd1      	ldr	r3, [pc, #836]	; (8000c18 <main+0x770>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b05      	cmp	r3, #5
 80008d8:	d00b      	beq.n	80008f2 <main+0x44a>
 80008da:	4bcf      	ldr	r3, [pc, #828]	; (8000c18 <main+0x770>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b0b      	cmp	r3, #11
 80008e0:	d007      	beq.n	80008f2 <main+0x44a>
 80008e2:	4bcd      	ldr	r3, [pc, #820]	; (8000c18 <main+0x770>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b11      	cmp	r3, #17
 80008e8:	d003      	beq.n	80008f2 <main+0x44a>
 80008ea:	4bcb      	ldr	r3, [pc, #812]	; (8000c18 <main+0x770>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b17      	cmp	r3, #23
 80008f0:	d117      	bne.n	8000922 <main+0x47a>
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	01db      	lsls	r3, r3, #7
 80008f6:	48cc      	ldr	r0, [pc, #816]	; (8000c28 <main+0x780>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	0019      	movs	r1, r3
 80008fc:	f001 f8f2 	bl	8001ae4 <HAL_GPIO_WritePin>
 8000900:	4bc7      	ldr	r3, [pc, #796]	; (8000c20 <main+0x778>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	4ac7      	ldr	r2, [pc, #796]	; (8000c24 <main+0x77c>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d90b      	bls.n	8000922 <main+0x47a>
 800090a:	4bc5      	ldr	r3, [pc, #788]	; (8000c20 <main+0x778>)
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	4ac1      	ldr	r2, [pc, #772]	; (8000c14 <main+0x76c>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d806      	bhi.n	8000922 <main+0x47a>
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	01db      	lsls	r3, r3, #7
 8000918:	48c3      	ldr	r0, [pc, #780]	; (8000c28 <main+0x780>)
 800091a:	2200      	movs	r2, #0
 800091c:	0019      	movs	r1, r3
 800091e:	f001 f8e1 	bl	8001ae4 <HAL_GPIO_WritePin>


				if((scene>=6)&&(scene<=11)){hour=1;LED_1_HOUR_ON;}
 8000922:	4bbd      	ldr	r3, [pc, #756]	; (8000c18 <main+0x770>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b05      	cmp	r3, #5
 8000928:	d90c      	bls.n	8000944 <main+0x49c>
 800092a:	4bbb      	ldr	r3, [pc, #748]	; (8000c18 <main+0x770>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b0b      	cmp	r3, #11
 8000930:	d808      	bhi.n	8000944 <main+0x49c>
 8000932:	4bbe      	ldr	r3, [pc, #760]	; (8000c2c <main+0x784>)
 8000934:	2201      	movs	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
 8000938:	4bb8      	ldr	r3, [pc, #736]	; (8000c1c <main+0x774>)
 800093a:	2201      	movs	r2, #1
 800093c:	2180      	movs	r1, #128	; 0x80
 800093e:	0018      	movs	r0, r3
 8000940:	f001 f8d0 	bl	8001ae4 <HAL_GPIO_WritePin>

				if((scene>=12)&&(scene<=17)){ hour=2;LED_1_HOUR_ON; LED_2_HOUR_ON;}
 8000944:	4bb4      	ldr	r3, [pc, #720]	; (8000c18 <main+0x770>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b0b      	cmp	r3, #11
 800094a:	d914      	bls.n	8000976 <main+0x4ce>
 800094c:	4bb2      	ldr	r3, [pc, #712]	; (8000c18 <main+0x770>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b11      	cmp	r3, #17
 8000952:	d810      	bhi.n	8000976 <main+0x4ce>
 8000954:	4bb5      	ldr	r3, [pc, #724]	; (8000c2c <main+0x784>)
 8000956:	2202      	movs	r2, #2
 8000958:	701a      	strb	r2, [r3, #0]
 800095a:	4bb0      	ldr	r3, [pc, #704]	; (8000c1c <main+0x774>)
 800095c:	2201      	movs	r2, #1
 800095e:	2180      	movs	r1, #128	; 0x80
 8000960:	0018      	movs	r0, r3
 8000962:	f001 f8bf 	bl	8001ae4 <HAL_GPIO_WritePin>
 8000966:	2380      	movs	r3, #128	; 0x80
 8000968:	00d9      	lsls	r1, r3, #3
 800096a:	23a0      	movs	r3, #160	; 0xa0
 800096c:	05db      	lsls	r3, r3, #23
 800096e:	2201      	movs	r2, #1
 8000970:	0018      	movs	r0, r3
 8000972:	f001 f8b7 	bl	8001ae4 <HAL_GPIO_WritePin>

				if((scene>=18)&&(scene<=23)){ hour=3;LED_1_HOUR_ON;LED_2_HOUR_ON;LED_3_HOUR_ON;}
 8000976:	4ba8      	ldr	r3, [pc, #672]	; (8000c18 <main+0x770>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b11      	cmp	r3, #17
 800097c:	d91b      	bls.n	80009b6 <main+0x50e>
 800097e:	4ba6      	ldr	r3, [pc, #664]	; (8000c18 <main+0x770>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b17      	cmp	r3, #23
 8000984:	d817      	bhi.n	80009b6 <main+0x50e>
 8000986:	4ba9      	ldr	r3, [pc, #676]	; (8000c2c <main+0x784>)
 8000988:	2203      	movs	r2, #3
 800098a:	701a      	strb	r2, [r3, #0]
 800098c:	4ba3      	ldr	r3, [pc, #652]	; (8000c1c <main+0x774>)
 800098e:	2201      	movs	r2, #1
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	0018      	movs	r0, r3
 8000994:	f001 f8a6 	bl	8001ae4 <HAL_GPIO_WritePin>
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	00d9      	lsls	r1, r3, #3
 800099c:	23a0      	movs	r3, #160	; 0xa0
 800099e:	05db      	lsls	r3, r3, #23
 80009a0:	2201      	movs	r2, #1
 80009a2:	0018      	movs	r0, r3
 80009a4:	f001 f89e 	bl	8001ae4 <HAL_GPIO_WritePin>
 80009a8:	2380      	movs	r3, #128	; 0x80
 80009aa:	021b      	lsls	r3, r3, #8
 80009ac:	489e      	ldr	r0, [pc, #632]	; (8000c28 <main+0x780>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	0019      	movs	r1, r3
 80009b2:	f001 f897 	bl	8001ae4 <HAL_GPIO_WritePin>

				if(scene==24){
 80009b6:	4b98      	ldr	r3, [pc, #608]	; (8000c18 <main+0x770>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b18      	cmp	r3, #24
 80009bc:	d000      	beq.n	80009c0 <main+0x518>
 80009be:	e161      	b.n	8000c84 <main+0x7dc>

					    LED_10_MIN_ON;
 80009c0:	4b96      	ldr	r3, [pc, #600]	; (8000c1c <main+0x774>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	2140      	movs	r1, #64	; 0x40
 80009c6:	0018      	movs	r0, r3
 80009c8:	f001 f88c 	bl	8001ae4 <HAL_GPIO_WritePin>
						LED_20_MIN_ON;
 80009cc:	23a0      	movs	r3, #160	; 0xa0
 80009ce:	05db      	lsls	r3, r3, #23
 80009d0:	2201      	movs	r2, #1
 80009d2:	2120      	movs	r1, #32
 80009d4:	0018      	movs	r0, r3
 80009d6:	f001 f885 	bl	8001ae4 <HAL_GPIO_WritePin>
						LED_30_MIN_ON;
 80009da:	23a0      	movs	r3, #160	; 0xa0
 80009dc:	05db      	lsls	r3, r3, #23
 80009de:	2201      	movs	r2, #1
 80009e0:	2180      	movs	r1, #128	; 0x80
 80009e2:	0018      	movs	r0, r3
 80009e4:	f001 f87e 	bl	8001ae4 <HAL_GPIO_WritePin>
						LED_40_MIN_ON;
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	0099      	lsls	r1, r3, #2
 80009ec:	23a0      	movs	r3, #160	; 0xa0
 80009ee:	05db      	lsls	r3, r3, #23
 80009f0:	2201      	movs	r2, #1
 80009f2:	0018      	movs	r0, r3
 80009f4:	f001 f876 	bl	8001ae4 <HAL_GPIO_WritePin>
						LED_50_MIN_ON;
 80009f8:	4b88      	ldr	r3, [pc, #544]	; (8000c1c <main+0x774>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	2102      	movs	r1, #2
 80009fe:	0018      	movs	r0, r3
 8000a00:	f001 f870 	bl	8001ae4 <HAL_GPIO_WritePin>
						LED_60_MIN_ON;
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	01db      	lsls	r3, r3, #7
 8000a08:	4887      	ldr	r0, [pc, #540]	; (8000c28 <main+0x780>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	0019      	movs	r1, r3
 8000a0e:	f001 f869 	bl	8001ae4 <HAL_GPIO_WritePin>
					    LED_1_HOUR_ON;
 8000a12:	4b82      	ldr	r3, [pc, #520]	; (8000c1c <main+0x774>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	2180      	movs	r1, #128	; 0x80
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f001 f863 	bl	8001ae4 <HAL_GPIO_WritePin>
					    LED_2_HOUR_ON;
 8000a1e:	2380      	movs	r3, #128	; 0x80
 8000a20:	00d9      	lsls	r1, r3, #3
 8000a22:	23a0      	movs	r3, #160	; 0xa0
 8000a24:	05db      	lsls	r3, r3, #23
 8000a26:	2201      	movs	r2, #1
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f001 f85b 	bl	8001ae4 <HAL_GPIO_WritePin>
					    LED_3_HOUR_ON;
 8000a2e:	2380      	movs	r3, #128	; 0x80
 8000a30:	021b      	lsls	r3, r3, #8
 8000a32:	487d      	ldr	r0, [pc, #500]	; (8000c28 <main+0x780>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	0019      	movs	r1, r3
 8000a38:	f001 f854 	bl	8001ae4 <HAL_GPIO_WritePin>

					   HAL_Delay(600);
 8000a3c:	2396      	movs	r3, #150	; 0x96
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	0018      	movs	r0, r3
 8000a42:	f000 fbf7 	bl	8001234 <HAL_Delay>

					    LED_10_MIN_OFF;
 8000a46:	4b75      	ldr	r3, [pc, #468]	; (8000c1c <main+0x774>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2140      	movs	r1, #64	; 0x40
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f001 f849 	bl	8001ae4 <HAL_GPIO_WritePin>
					    LED_20_MIN_OFF;
 8000a52:	23a0      	movs	r3, #160	; 0xa0
 8000a54:	05db      	lsls	r3, r3, #23
 8000a56:	2200      	movs	r2, #0
 8000a58:	2120      	movs	r1, #32
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f001 f842 	bl	8001ae4 <HAL_GPIO_WritePin>
					    LED_30_MIN_OFF;
 8000a60:	23a0      	movs	r3, #160	; 0xa0
 8000a62:	05db      	lsls	r3, r3, #23
 8000a64:	2200      	movs	r2, #0
 8000a66:	2180      	movs	r1, #128	; 0x80
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f001 f83b 	bl	8001ae4 <HAL_GPIO_WritePin>
					    LED_40_MIN_OFF;
 8000a6e:	2380      	movs	r3, #128	; 0x80
 8000a70:	0099      	lsls	r1, r3, #2
 8000a72:	23a0      	movs	r3, #160	; 0xa0
 8000a74:	05db      	lsls	r3, r3, #23
 8000a76:	2200      	movs	r2, #0
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f001 f833 	bl	8001ae4 <HAL_GPIO_WritePin>
					    LED_50_MIN_OFF;
 8000a7e:	4b67      	ldr	r3, [pc, #412]	; (8000c1c <main+0x774>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	2102      	movs	r1, #2
 8000a84:	0018      	movs	r0, r3
 8000a86:	f001 f82d 	bl	8001ae4 <HAL_GPIO_WritePin>
					    LED_60_MIN_OFF;
 8000a8a:	2380      	movs	r3, #128	; 0x80
 8000a8c:	01db      	lsls	r3, r3, #7
 8000a8e:	4866      	ldr	r0, [pc, #408]	; (8000c28 <main+0x780>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	0019      	movs	r1, r3
 8000a94:	f001 f826 	bl	8001ae4 <HAL_GPIO_WritePin>
					    LED_1_HOUR_OFF;
 8000a98:	4b60      	ldr	r3, [pc, #384]	; (8000c1c <main+0x774>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2180      	movs	r1, #128	; 0x80
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f001 f820 	bl	8001ae4 <HAL_GPIO_WritePin>
					    LED_2_HOUR_OFF;
 8000aa4:	2380      	movs	r3, #128	; 0x80
 8000aa6:	00d9      	lsls	r1, r3, #3
 8000aa8:	23a0      	movs	r3, #160	; 0xa0
 8000aaa:	05db      	lsls	r3, r3, #23
 8000aac:	2200      	movs	r2, #0
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f001 f818 	bl	8001ae4 <HAL_GPIO_WritePin>
					    LED_3_HOUR_OFF;
 8000ab4:	2380      	movs	r3, #128	; 0x80
 8000ab6:	021b      	lsls	r3, r3, #8
 8000ab8:	485b      	ldr	r0, [pc, #364]	; (8000c28 <main+0x780>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	0019      	movs	r1, r3
 8000abe:	f001 f811 	bl	8001ae4 <HAL_GPIO_WritePin>

					   HAL_Delay(600);
 8000ac2:	2396      	movs	r3, #150	; 0x96
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f000 fbb4 	bl	8001234 <HAL_Delay>

					    LED_10_MIN_ON;
 8000acc:	4b53      	ldr	r3, [pc, #332]	; (8000c1c <main+0x774>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2140      	movs	r1, #64	; 0x40
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f001 f806 	bl	8001ae4 <HAL_GPIO_WritePin>
					    LED_20_MIN_ON;
 8000ad8:	23a0      	movs	r3, #160	; 0xa0
 8000ada:	05db      	lsls	r3, r3, #23
 8000adc:	2201      	movs	r2, #1
 8000ade:	2120      	movs	r1, #32
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f000 ffff 	bl	8001ae4 <HAL_GPIO_WritePin>
						LED_30_MIN_ON;
 8000ae6:	23a0      	movs	r3, #160	; 0xa0
 8000ae8:	05db      	lsls	r3, r3, #23
 8000aea:	2201      	movs	r2, #1
 8000aec:	2180      	movs	r1, #128	; 0x80
 8000aee:	0018      	movs	r0, r3
 8000af0:	f000 fff8 	bl	8001ae4 <HAL_GPIO_WritePin>
						LED_40_MIN_ON;
 8000af4:	2380      	movs	r3, #128	; 0x80
 8000af6:	0099      	lsls	r1, r3, #2
 8000af8:	23a0      	movs	r3, #160	; 0xa0
 8000afa:	05db      	lsls	r3, r3, #23
 8000afc:	2201      	movs	r2, #1
 8000afe:	0018      	movs	r0, r3
 8000b00:	f000 fff0 	bl	8001ae4 <HAL_GPIO_WritePin>
					    LED_50_MIN_ON;
 8000b04:	4b45      	ldr	r3, [pc, #276]	; (8000c1c <main+0x774>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	2102      	movs	r1, #2
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f000 ffea 	bl	8001ae4 <HAL_GPIO_WritePin>
					    LED_60_MIN_ON;
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	01db      	lsls	r3, r3, #7
 8000b14:	4844      	ldr	r0, [pc, #272]	; (8000c28 <main+0x780>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	0019      	movs	r1, r3
 8000b1a:	f000 ffe3 	bl	8001ae4 <HAL_GPIO_WritePin>
					    LED_1_HOUR_ON;
 8000b1e:	4b3f      	ldr	r3, [pc, #252]	; (8000c1c <main+0x774>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	2180      	movs	r1, #128	; 0x80
 8000b24:	0018      	movs	r0, r3
 8000b26:	f000 ffdd 	bl	8001ae4 <HAL_GPIO_WritePin>
					    LED_2_HOUR_ON;
 8000b2a:	2380      	movs	r3, #128	; 0x80
 8000b2c:	00d9      	lsls	r1, r3, #3
 8000b2e:	23a0      	movs	r3, #160	; 0xa0
 8000b30:	05db      	lsls	r3, r3, #23
 8000b32:	2201      	movs	r2, #1
 8000b34:	0018      	movs	r0, r3
 8000b36:	f000 ffd5 	bl	8001ae4 <HAL_GPIO_WritePin>
					    LED_3_HOUR_ON;
 8000b3a:	2380      	movs	r3, #128	; 0x80
 8000b3c:	021b      	lsls	r3, r3, #8
 8000b3e:	483a      	ldr	r0, [pc, #232]	; (8000c28 <main+0x780>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	0019      	movs	r1, r3
 8000b44:	f000 ffce 	bl	8001ae4 <HAL_GPIO_WritePin>

					    HAL_Delay(600);
 8000b48:	2396      	movs	r3, #150	; 0x96
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f000 fb71 	bl	8001234 <HAL_Delay>

					    LED_10_MIN_OFF;
 8000b52:	4b32      	ldr	r3, [pc, #200]	; (8000c1c <main+0x774>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	2140      	movs	r1, #64	; 0x40
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f000 ffc3 	bl	8001ae4 <HAL_GPIO_WritePin>
					   	LED_20_MIN_OFF;
 8000b5e:	23a0      	movs	r3, #160	; 0xa0
 8000b60:	05db      	lsls	r3, r3, #23
 8000b62:	2200      	movs	r2, #0
 8000b64:	2120      	movs	r1, #32
 8000b66:	0018      	movs	r0, r3
 8000b68:	f000 ffbc 	bl	8001ae4 <HAL_GPIO_WritePin>
					   	LED_30_MIN_OFF;
 8000b6c:	23a0      	movs	r3, #160	; 0xa0
 8000b6e:	05db      	lsls	r3, r3, #23
 8000b70:	2200      	movs	r2, #0
 8000b72:	2180      	movs	r1, #128	; 0x80
 8000b74:	0018      	movs	r0, r3
 8000b76:	f000 ffb5 	bl	8001ae4 <HAL_GPIO_WritePin>
					   	LED_40_MIN_OFF;
 8000b7a:	2380      	movs	r3, #128	; 0x80
 8000b7c:	0099      	lsls	r1, r3, #2
 8000b7e:	23a0      	movs	r3, #160	; 0xa0
 8000b80:	05db      	lsls	r3, r3, #23
 8000b82:	2200      	movs	r2, #0
 8000b84:	0018      	movs	r0, r3
 8000b86:	f000 ffad 	bl	8001ae4 <HAL_GPIO_WritePin>
					   	LED_50_MIN_OFF;
 8000b8a:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <main+0x774>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2102      	movs	r1, #2
 8000b90:	0018      	movs	r0, r3
 8000b92:	f000 ffa7 	bl	8001ae4 <HAL_GPIO_WritePin>
					   	LED_60_MIN_OFF;
 8000b96:	2380      	movs	r3, #128	; 0x80
 8000b98:	01db      	lsls	r3, r3, #7
 8000b9a:	4823      	ldr	r0, [pc, #140]	; (8000c28 <main+0x780>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	0019      	movs	r1, r3
 8000ba0:	f000 ffa0 	bl	8001ae4 <HAL_GPIO_WritePin>
					   	LED_1_HOUR_OFF;
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <main+0x774>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2180      	movs	r1, #128	; 0x80
 8000baa:	0018      	movs	r0, r3
 8000bac:	f000 ff9a 	bl	8001ae4 <HAL_GPIO_WritePin>
					   	LED_2_HOUR_OFF;
 8000bb0:	2380      	movs	r3, #128	; 0x80
 8000bb2:	00d9      	lsls	r1, r3, #3
 8000bb4:	23a0      	movs	r3, #160	; 0xa0
 8000bb6:	05db      	lsls	r3, r3, #23
 8000bb8:	2200      	movs	r2, #0
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f000 ff92 	bl	8001ae4 <HAL_GPIO_WritePin>
					   	LED_3_HOUR_OFF;
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	021b      	lsls	r3, r3, #8
 8000bc4:	4818      	ldr	r0, [pc, #96]	; (8000c28 <main+0x780>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	0019      	movs	r1, r3
 8000bca:	f000 ff8b 	bl	8001ae4 <HAL_GPIO_WritePin>

					   	HAL_Delay(600);
 8000bce:	2396      	movs	r3, #150	; 0x96
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f000 fb2e 	bl	8001234 <HAL_Delay>

					   	LED_10_MIN_ON;
 8000bd8:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <main+0x774>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	2140      	movs	r1, #64	; 0x40
 8000bde:	0018      	movs	r0, r3
 8000be0:	f000 ff80 	bl	8001ae4 <HAL_GPIO_WritePin>
					   	LED_20_MIN_ON;
 8000be4:	23a0      	movs	r3, #160	; 0xa0
 8000be6:	05db      	lsls	r3, r3, #23
 8000be8:	2201      	movs	r2, #1
 8000bea:	2120      	movs	r1, #32
 8000bec:	0018      	movs	r0, r3
 8000bee:	f000 ff79 	bl	8001ae4 <HAL_GPIO_WritePin>
					   	LED_30_MIN_ON;
 8000bf2:	23a0      	movs	r3, #160	; 0xa0
 8000bf4:	05db      	lsls	r3, r3, #23
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2180      	movs	r1, #128	; 0x80
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 ff72 	bl	8001ae4 <HAL_GPIO_WritePin>
					   	LED_40_MIN_ON;
 8000c00:	2380      	movs	r3, #128	; 0x80
 8000c02:	0099      	lsls	r1, r3, #2
 8000c04:	23a0      	movs	r3, #160	; 0xa0
 8000c06:	05db      	lsls	r3, r3, #23
 8000c08:	2201      	movs	r2, #1
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f000 ff6a 	bl	8001ae4 <HAL_GPIO_WritePin>
 8000c10:	e00e      	b.n	8000c30 <main+0x788>
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	0000464f 	.word	0x0000464f
 8000c18:	20000098 	.word	0x20000098
 8000c1c:	50000400 	.word	0x50000400
 8000c20:	2000009a 	.word	0x2000009a
 8000c24:	00002328 	.word	0x00002328
 8000c28:	50000800 	.word	0x50000800
 8000c2c:	20000099 	.word	0x20000099
					   	LED_50_MIN_ON;
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <main+0x7e8>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	2102      	movs	r1, #2
 8000c36:	0018      	movs	r0, r3
 8000c38:	f000 ff54 	bl	8001ae4 <HAL_GPIO_WritePin>
					   	LED_60_MIN_ON;
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	01db      	lsls	r3, r3, #7
 8000c40:	4814      	ldr	r0, [pc, #80]	; (8000c94 <main+0x7ec>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	0019      	movs	r1, r3
 8000c46:	f000 ff4d 	bl	8001ae4 <HAL_GPIO_WritePin>
					   	LED_1_HOUR_ON;
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <main+0x7e8>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2180      	movs	r1, #128	; 0x80
 8000c50:	0018      	movs	r0, r3
 8000c52:	f000 ff47 	bl	8001ae4 <HAL_GPIO_WritePin>
					   	LED_2_HOUR_ON;
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	00d9      	lsls	r1, r3, #3
 8000c5a:	23a0      	movs	r3, #160	; 0xa0
 8000c5c:	05db      	lsls	r3, r3, #23
 8000c5e:	2201      	movs	r2, #1
 8000c60:	0018      	movs	r0, r3
 8000c62:	f000 ff3f 	bl	8001ae4 <HAL_GPIO_WritePin>
					   	LED_3_HOUR_ON;
 8000c66:	2380      	movs	r3, #128	; 0x80
 8000c68:	021b      	lsls	r3, r3, #8
 8000c6a:	480a      	ldr	r0, [pc, #40]	; (8000c94 <main+0x7ec>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	0019      	movs	r1, r3
 8000c70:	f000 ff38 	bl	8001ae4 <HAL_GPIO_WritePin>
					    HAL_Delay(1000);
 8000c74:	23fa      	movs	r3, #250	; 0xfa
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f000 fadb 	bl	8001234 <HAL_Delay>
				    	hour=4;}
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <main+0x7f0>)
 8000c80:	2204      	movs	r2, #4
 8000c82:	701a      	strb	r2, [r3, #0]

				 Delay(dl);
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <main+0x7f4>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f000 f987 	bl	8000f9c <Delay>
	 LED_PWM_ON;
 8000c8e:	e4c4      	b.n	800061a <main+0x172>
 8000c90:	50000400 	.word	0x50000400
 8000c94:	50000800 	.word	0x50000800
 8000c98:	20000099 	.word	0x20000099
 8000c9c:	20000088 	.word	0x20000088

08000ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b093      	sub	sp, #76	; 0x4c
 8000ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca6:	2414      	movs	r4, #20
 8000ca8:	193b      	adds	r3, r7, r4
 8000caa:	0018      	movs	r0, r3
 8000cac:	2334      	movs	r3, #52	; 0x34
 8000cae:	001a      	movs	r2, r3
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	f001 fd4b 	bl	800274c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb6:	003b      	movs	r3, r7
 8000cb8:	0018      	movs	r0, r3
 8000cba:	2314      	movs	r3, #20
 8000cbc:	001a      	movs	r2, r3
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	f001 fd44 	bl	800274c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cc4:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <SystemClock_Config+0xb0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a22      	ldr	r2, [pc, #136]	; (8000d54 <SystemClock_Config+0xb4>)
 8000cca:	401a      	ands	r2, r3
 8000ccc:	4b20      	ldr	r3, [pc, #128]	; (8000d50 <SystemClock_Config+0xb0>)
 8000cce:	2180      	movs	r1, #128	; 0x80
 8000cd0:	0109      	lsls	r1, r1, #4
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd6:	0021      	movs	r1, r4
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2202      	movs	r2, #2
 8000cdc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	2210      	movs	r2, #16
 8000ce8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	2202      	movs	r2, #2
 8000cee:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	2280      	movs	r2, #128	; 0x80
 8000cfa:	02d2      	lsls	r2, r2, #11
 8000cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	03d2      	lsls	r2, r2, #15
 8000d04:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f000 ff91 	bl	8001c30 <HAL_RCC_OscConfig>
 8000d0e:	1e03      	subs	r3, r0, #0
 8000d10:	d001      	beq.n	8000d16 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000d12:	f000 f956 	bl	8000fc2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d16:	003b      	movs	r3, r7
 8000d18:	220f      	movs	r2, #15
 8000d1a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d1c:	003b      	movs	r3, r7
 8000d1e:	2203      	movs	r2, #3
 8000d20:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d22:	003b      	movs	r3, r7
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d28:	003b      	movs	r3, r7
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d2e:	003b      	movs	r3, r7
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d34:	003b      	movs	r3, r7
 8000d36:	2101      	movs	r1, #1
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f001 faf5 	bl	8002328 <HAL_RCC_ClockConfig>
 8000d3e:	1e03      	subs	r3, r0, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d42:	f000 f93e 	bl	8000fc2 <Error_Handler>
  }
}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	b013      	add	sp, #76	; 0x4c
 8000d4c:	bd90      	pop	{r4, r7, pc}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	40007000 	.word	0x40007000
 8000d54:	ffffe7ff 	.word	0xffffe7ff

08000d58 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d5e:	003b      	movs	r3, r7
 8000d60:	0018      	movs	r0, r3
 8000d62:	2308      	movs	r3, #8
 8000d64:	001a      	movs	r2, r3
 8000d66:	2100      	movs	r1, #0
 8000d68:	f001 fcf0 	bl	800274c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000d6c:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <MX_ADC_Init+0xc0>)
 8000d6e:	4a2b      	ldr	r2, [pc, #172]	; (8000e1c <MX_ADC_Init+0xc4>)
 8000d70:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000d72:	4b29      	ldr	r3, [pc, #164]	; (8000e18 <MX_ADC_Init+0xc0>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d78:	4b27      	ldr	r3, [pc, #156]	; (8000e18 <MX_ADC_Init+0xc0>)
 8000d7a:	2280      	movs	r2, #128	; 0x80
 8000d7c:	05d2      	lsls	r2, r2, #23
 8000d7e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000d80:	4b25      	ldr	r3, [pc, #148]	; (8000e18 <MX_ADC_Init+0xc0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d86:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <MX_ADC_Init+0xc0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000d8c:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <MX_ADC_Init+0xc0>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d92:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <MX_ADC_Init+0xc0>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000d98:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <MX_ADC_Init+0xc0>)
 8000d9a:	2220      	movs	r2, #32
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000da0:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <MX_ADC_Init+0xc0>)
 8000da2:	2221      	movs	r2, #33	; 0x21
 8000da4:	2100      	movs	r1, #0
 8000da6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <MX_ADC_Init+0xc0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <MX_ADC_Init+0xc0>)
 8000db0:	22c2      	movs	r2, #194	; 0xc2
 8000db2:	32ff      	adds	r2, #255	; 0xff
 8000db4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <MX_ADC_Init+0xc0>)
 8000db8:	222c      	movs	r2, #44	; 0x2c
 8000dba:	2100      	movs	r1, #0
 8000dbc:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dbe:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <MX_ADC_Init+0xc0>)
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dc4:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <MX_ADC_Init+0xc0>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000dca:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <MX_ADC_Init+0xc0>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <MX_ADC_Init+0xc0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <MX_ADC_Init+0xc0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <MX_ADC_Init+0xc0>)
 8000dde:	0018      	movs	r0, r3
 8000de0:	f000 fa4c 	bl	800127c <HAL_ADC_Init>
 8000de4:	1e03      	subs	r3, r0, #0
 8000de6:	d001      	beq.n	8000dec <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000de8:	f000 f8eb 	bl	8000fc2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000dec:	003b      	movs	r3, r7
 8000dee:	4a0c      	ldr	r2, [pc, #48]	; (8000e20 <MX_ADC_Init+0xc8>)
 8000df0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000df2:	003b      	movs	r3, r7
 8000df4:	2280      	movs	r2, #128	; 0x80
 8000df6:	0152      	lsls	r2, r2, #5
 8000df8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000dfa:	003a      	movs	r2, r7
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <MX_ADC_Init+0xc0>)
 8000dfe:	0011      	movs	r1, r2
 8000e00:	0018      	movs	r0, r3
 8000e02:	f000 fbaf 	bl	8001564 <HAL_ADC_ConfigChannel>
 8000e06:	1e03      	subs	r3, r0, #0
 8000e08:	d001      	beq.n	8000e0e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000e0a:	f000 f8da 	bl	8000fc2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b002      	add	sp, #8
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	2000002c 	.word	0x2000002c
 8000e1c:	40012400 	.word	0x40012400
 8000e20:	10000010 	.word	0x10000010

08000e24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2a:	240c      	movs	r4, #12
 8000e2c:	193b      	adds	r3, r7, r4
 8000e2e:	0018      	movs	r0, r3
 8000e30:	2314      	movs	r3, #20
 8000e32:	001a      	movs	r2, r3
 8000e34:	2100      	movs	r1, #0
 8000e36:	f001 fc89 	bl	800274c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3a:	4b54      	ldr	r3, [pc, #336]	; (8000f8c <MX_GPIO_Init+0x168>)
 8000e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e3e:	4b53      	ldr	r3, [pc, #332]	; (8000f8c <MX_GPIO_Init+0x168>)
 8000e40:	2104      	movs	r1, #4
 8000e42:	430a      	orrs	r2, r1
 8000e44:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e46:	4b51      	ldr	r3, [pc, #324]	; (8000f8c <MX_GPIO_Init+0x168>)
 8000e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4a:	2204      	movs	r2, #4
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	4b4e      	ldr	r3, [pc, #312]	; (8000f8c <MX_GPIO_Init+0x168>)
 8000e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e56:	4b4d      	ldr	r3, [pc, #308]	; (8000f8c <MX_GPIO_Init+0x168>)
 8000e58:	2101      	movs	r1, #1
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e5e:	4b4b      	ldr	r3, [pc, #300]	; (8000f8c <MX_GPIO_Init+0x168>)
 8000e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e62:	2201      	movs	r2, #1
 8000e64:	4013      	ands	r3, r2
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	4b48      	ldr	r3, [pc, #288]	; (8000f8c <MX_GPIO_Init+0x168>)
 8000e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e6e:	4b47      	ldr	r3, [pc, #284]	; (8000f8c <MX_GPIO_Init+0x168>)
 8000e70:	2102      	movs	r1, #2
 8000e72:	430a      	orrs	r2, r1
 8000e74:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e76:	4b45      	ldr	r3, [pc, #276]	; (8000f8c <MX_GPIO_Init+0x168>)
 8000e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_60_min_Pin|LED_3_hour_Pin, GPIO_PIN_RESET);
 8000e82:	23c0      	movs	r3, #192	; 0xc0
 8000e84:	021b      	lsls	r3, r3, #8
 8000e86:	4842      	ldr	r0, [pc, #264]	; (8000f90 <MX_GPIO_Init+0x16c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	f000 fe2a 	bl	8001ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_ENABLE_Pin|LED_PWM_Pin|LED_20_min_Pin|LED_30_min_Pin
 8000e90:	4940      	ldr	r1, [pc, #256]	; (8000f94 <MX_GPIO_Init+0x170>)
 8000e92:	23a0      	movs	r3, #160	; 0xa0
 8000e94:	05db      	lsls	r3, r3, #23
 8000e96:	2200      	movs	r2, #0
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f000 fe23 	bl	8001ae4 <HAL_GPIO_WritePin>
                          |LED_40_min_Pin|LED_2_hour_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_50_min_Pin|LED_10_min_Pin|LED_1_hour_Pin, GPIO_PIN_RESET);
 8000e9e:	4b3e      	ldr	r3, [pc, #248]	; (8000f98 <MX_GPIO_Init+0x174>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	21c2      	movs	r1, #194	; 0xc2
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f000 fe1d 	bl	8001ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_60_min_Pin LED_3_hour_Pin */
  GPIO_InitStruct.Pin = LED_60_min_Pin|LED_3_hour_Pin;
 8000eaa:	193b      	adds	r3, r7, r4
 8000eac:	22c0      	movs	r2, #192	; 0xc0
 8000eae:	0212      	lsls	r2, r2, #8
 8000eb0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	193b      	adds	r3, r7, r4
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	193b      	adds	r3, r7, r4
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	193b      	adds	r3, r7, r4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec4:	193b      	adds	r3, r7, r4
 8000ec6:	4a32      	ldr	r2, [pc, #200]	; (8000f90 <MX_GPIO_Init+0x16c>)
 8000ec8:	0019      	movs	r1, r3
 8000eca:	0010      	movs	r0, r2
 8000ecc:	f000 fca4 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ENABLE_Pin */
  GPIO_InitStruct.Pin = LED_ENABLE_Pin;
 8000ed0:	193b      	adds	r3, r7, r4
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed6:	193b      	adds	r3, r7, r4
 8000ed8:	2201      	movs	r2, #1
 8000eda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	193b      	adds	r3, r7, r4
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee2:	193b      	adds	r3, r7, r4
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	193a      	adds	r2, r7, r4
 8000eea:	23a0      	movs	r3, #160	; 0xa0
 8000eec:	05db      	lsls	r3, r3, #23
 8000eee:	0011      	movs	r1, r2
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f000 fc91 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_PWM_Pin */
  GPIO_InitStruct.Pin = LED_PWM_Pin;
 8000ef6:	193b      	adds	r3, r7, r4
 8000ef8:	2202      	movs	r2, #2
 8000efa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	193b      	adds	r3, r7, r4
 8000efe:	2201      	movs	r2, #1
 8000f00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	193b      	adds	r3, r7, r4
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f08:	193b      	adds	r3, r7, r4
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	193a      	adds	r2, r7, r4
 8000f10:	23a0      	movs	r3, #160	; 0xa0
 8000f12:	05db      	lsls	r3, r3, #23
 8000f14:	0011      	movs	r1, r2
 8000f16:	0018      	movs	r0, r3
 8000f18:	f000 fc7e 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_20_min_Pin LED_30_min_Pin LED_40_min_Pin LED_2_hour_Pin */
  GPIO_InitStruct.Pin = LED_20_min_Pin|LED_30_min_Pin|LED_40_min_Pin|LED_2_hour_Pin;
 8000f1c:	0021      	movs	r1, r4
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	22d4      	movs	r2, #212	; 0xd4
 8000f22:	00d2      	lsls	r2, r2, #3
 8000f24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f26:	000c      	movs	r4, r1
 8000f28:	193b      	adds	r3, r7, r4
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	193b      	adds	r3, r7, r4
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	193b      	adds	r3, r7, r4
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	193a      	adds	r2, r7, r4
 8000f3c:	23a0      	movs	r3, #160	; 0xa0
 8000f3e:	05db      	lsls	r3, r3, #23
 8000f40:	0011      	movs	r1, r2
 8000f42:	0018      	movs	r0, r3
 8000f44:	f000 fc68 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_50_min_Pin LED_10_min_Pin LED_1_hour_Pin */
  GPIO_InitStruct.Pin = LED_50_min_Pin|LED_10_min_Pin|LED_1_hour_Pin;
 8000f48:	0021      	movs	r1, r4
 8000f4a:	187b      	adds	r3, r7, r1
 8000f4c:	22c2      	movs	r2, #194	; 0xc2
 8000f4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	2201      	movs	r2, #1
 8000f54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	4a0c      	ldr	r2, [pc, #48]	; (8000f98 <MX_GPIO_Init+0x174>)
 8000f66:	0019      	movs	r1, r3
 8000f68:	0010      	movs	r0, r2
 8000f6a:	f000 fc55 	bl	8001818 <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB6);
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	0018      	movs	r0, r3
 8000f74:	f000 fdd4 	bl	8001b20 <HAL_I2CEx_EnableFastModePlus>

  /**/
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 8000f78:	2380      	movs	r3, #128	; 0x80
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f000 fdcf 	bl	8001b20 <HAL_I2CEx_EnableFastModePlus>

}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b009      	add	sp, #36	; 0x24
 8000f88:	bd90      	pop	{r4, r7, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	50000800 	.word	0x50000800
 8000f94:	000006a3 	.word	0x000006a3
 8000f98:	50000400 	.word	0x50000400

08000f9c <Delay>:

/* USER CODE BEGIN 4 */

void Delay(uint32_t d){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

for(uint32_t n=0;n<d;){
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	e002      	b.n	8000fb0 <Delay+0x14>
	n++;}
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3301      	adds	r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
for(uint32_t n=0;n<d;){
 8000fb0:	68fa      	ldr	r2, [r7, #12]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d3f8      	bcc.n	8000faa <Delay+0xe>
}
 8000fb8:	46c0      	nop			; (mov r8, r8)
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b004      	add	sp, #16
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc6:	b672      	cpsid	i
}
 8000fc8:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fca:	e7fe      	b.n	8000fca <Error_Handler+0x8>

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8000fd2:	003b      	movs	r3, r7
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	2308      	movs	r3, #8
 8000fd8:	001a      	movs	r2, r3
 8000fda:	2100      	movs	r1, #0
 8000fdc:	f001 fbb6 	bl	800274c <memset>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	; (800101c <HAL_MspInit+0x50>)
 8000fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fe4:	4b0d      	ldr	r3, [pc, #52]	; (800101c <HAL_MspInit+0x50>)
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <HAL_MspInit+0x50>)
 8000fee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_MspInit+0x50>)
 8000ff2:	2180      	movs	r1, #128	; 0x80
 8000ff4:	0549      	lsls	r1, r1, #21
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8000ffa:	003b      	movs	r3, r7
 8000ffc:	22c0      	movs	r2, #192	; 0xc0
 8000ffe:	601a      	str	r2, [r3, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8001000:	003b      	movs	r3, r7
 8001002:	2200      	movs	r2, #0
 8001004:	605a      	str	r2, [r3, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8001006:	003b      	movs	r3, r7
 8001008:	0018      	movs	r0, r3
 800100a:	f000 fda1 	bl	8001b50 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 800100e:	f000 fe01 	bl	8001c14 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	46bd      	mov	sp, r7
 8001016:	b002      	add	sp, #8
 8001018:	bd80      	pop	{r7, pc}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	40021000 	.word	0x40021000

08001020 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	240c      	movs	r4, #12
 800102a:	193b      	adds	r3, r7, r4
 800102c:	0018      	movs	r0, r3
 800102e:	2314      	movs	r3, #20
 8001030:	001a      	movs	r2, r3
 8001032:	2100      	movs	r1, #0
 8001034:	f001 fb8a 	bl	800274c <memset>
  if(hadc->Instance==ADC1)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a14      	ldr	r2, [pc, #80]	; (8001090 <HAL_ADC_MspInit+0x70>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d122      	bne.n	8001088 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <HAL_ADC_MspInit+0x74>)
 8001044:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <HAL_ADC_MspInit+0x74>)
 8001048:	2180      	movs	r1, #128	; 0x80
 800104a:	0089      	lsls	r1, r1, #2
 800104c:	430a      	orrs	r2, r1
 800104e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <HAL_ADC_MspInit+0x74>)
 8001052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <HAL_ADC_MspInit+0x74>)
 8001056:	2101      	movs	r1, #1
 8001058:	430a      	orrs	r2, r1
 800105a:	62da      	str	r2, [r3, #44]	; 0x2c
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <HAL_ADC_MspInit+0x74>)
 800105e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001060:	2201      	movs	r2, #1
 8001062:	4013      	ands	r3, r2
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = ADC_LED_INP_Pin;
 8001068:	193b      	adds	r3, r7, r4
 800106a:	2210      	movs	r2, #16
 800106c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106e:	193b      	adds	r3, r7, r4
 8001070:	2203      	movs	r2, #3
 8001072:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	193b      	adds	r3, r7, r4
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_LED_INP_GPIO_Port, &GPIO_InitStruct);
 800107a:	193a      	adds	r2, r7, r4
 800107c:	23a0      	movs	r3, #160	; 0xa0
 800107e:	05db      	lsls	r3, r3, #23
 8001080:	0011      	movs	r1, r2
 8001082:	0018      	movs	r0, r3
 8001084:	f000 fbc8 	bl	8001818 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	b009      	add	sp, #36	; 0x24
 800108e:	bd90      	pop	{r4, r7, pc}
 8001090:	40012400 	.word	0x40012400
 8001094:	40021000 	.word	0x40021000

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800109c:	e7fe      	b.n	800109c <NMI_Handler+0x4>

0800109e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <HardFault_Handler+0x4>

080010a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010a8:	46c0      	nop			; (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010bc:	f000 f89e 	bl	80011fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c0:	46c0      	nop			; (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80010d0:	4813      	ldr	r0, [pc, #76]	; (8001120 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80010d2:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80010d4:	4813      	ldr	r0, [pc, #76]	; (8001124 <LoopForever+0x6>)
    LDR R1, [R0]
 80010d6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80010d8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80010da:	4a13      	ldr	r2, [pc, #76]	; (8001128 <LoopForever+0xa>)
    CMP R1, R2
 80010dc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80010de:	d105      	bne.n	80010ec <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80010e0:	4812      	ldr	r0, [pc, #72]	; (800112c <LoopForever+0xe>)
    LDR R1,=0x00000001
 80010e2:	4913      	ldr	r1, [pc, #76]	; (8001130 <LoopForever+0x12>)
    STR R1, [R0]
 80010e4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80010e6:	4813      	ldr	r0, [pc, #76]	; (8001134 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80010e8:	4913      	ldr	r1, [pc, #76]	; (8001138 <LoopForever+0x1a>)
    STR R1, [R0]
 80010ea:	6001      	str	r1, [r0, #0]

080010ec <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010ec:	4813      	ldr	r0, [pc, #76]	; (800113c <LoopForever+0x1e>)
  ldr r1, =_edata
 80010ee:	4914      	ldr	r1, [pc, #80]	; (8001140 <LoopForever+0x22>)
  ldr r2, =_sidata
 80010f0:	4a14      	ldr	r2, [pc, #80]	; (8001144 <LoopForever+0x26>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f4:	e002      	b.n	80010fc <LoopCopyDataInit>

080010f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fa:	3304      	adds	r3, #4

080010fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001100:	d3f9      	bcc.n	80010f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001102:	4a11      	ldr	r2, [pc, #68]	; (8001148 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001104:	4c11      	ldr	r4, [pc, #68]	; (800114c <LoopForever+0x2e>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001108:	e001      	b.n	800110e <LoopFillZerobss>

0800110a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800110c:	3204      	adds	r2, #4

0800110e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001110:	d3fb      	bcc.n	800110a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001112:	f7ff ffd8 	bl	80010c6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001116:	f001 faf5 	bl	8002704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800111a:	f7ff f9c5 	bl	80004a8 <main>

0800111e <LoopForever>:

LoopForever:
    b LoopForever
 800111e:	e7fe      	b.n	800111e <LoopForever>
   ldr   r0, =_estack
 8001120:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8001124:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001128:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 800112c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001130:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001134:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001138:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800113c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001140:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001144:	080027a0 	.word	0x080027a0
  ldr r2, =_sbss
 8001148:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800114c:	200000a0 	.word	0x200000a0

08001150 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001150:	e7fe      	b.n	8001150 <ADC1_COMP_IRQHandler>
	...

08001154 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800115a:	1dfb      	adds	r3, r7, #7
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <HAL_Init+0x3c>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_Init+0x3c>)
 8001166:	2140      	movs	r1, #64	; 0x40
 8001168:	430a      	orrs	r2, r1
 800116a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800116c:	2003      	movs	r0, #3
 800116e:	f000 f811 	bl	8001194 <HAL_InitTick>
 8001172:	1e03      	subs	r3, r0, #0
 8001174:	d003      	beq.n	800117e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001176:	1dfb      	adds	r3, r7, #7
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	e001      	b.n	8001182 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800117e:	f7ff ff25 	bl	8000fcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	781b      	ldrb	r3, [r3, #0]
}
 8001186:	0018      	movs	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	b002      	add	sp, #8
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	40022000 	.word	0x40022000

08001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <HAL_InitTick+0x5c>)
 800119e:	681c      	ldr	r4, [r3, #0]
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <HAL_InitTick+0x60>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	0019      	movs	r1, r3
 80011a6:	23fa      	movs	r3, #250	; 0xfa
 80011a8:	0098      	lsls	r0, r3, #2
 80011aa:	f7fe ffad 	bl	8000108 <__udivsi3>
 80011ae:	0003      	movs	r3, r0
 80011b0:	0019      	movs	r1, r3
 80011b2:	0020      	movs	r0, r4
 80011b4:	f7fe ffa8 	bl	8000108 <__udivsi3>
 80011b8:	0003      	movs	r3, r0
 80011ba:	0018      	movs	r0, r3
 80011bc:	f000 fb1f 	bl	80017fe <HAL_SYSTICK_Config>
 80011c0:	1e03      	subs	r3, r0, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e00f      	b.n	80011e8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d80b      	bhi.n	80011e6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	2301      	movs	r3, #1
 80011d2:	425b      	negs	r3, r3
 80011d4:	2200      	movs	r2, #0
 80011d6:	0018      	movs	r0, r3
 80011d8:	f000 fafc 	bl	80017d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_InitTick+0x64>)
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e000      	b.n	80011e8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	0018      	movs	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b003      	add	sp, #12
 80011ee:	bd90      	pop	{r4, r7, pc}
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000004 	.word	0x20000004

080011fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_IncTick+0x1c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	001a      	movs	r2, r3
 8001206:	4b05      	ldr	r3, [pc, #20]	; (800121c <HAL_IncTick+0x20>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	18d2      	adds	r2, r2, r3
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <HAL_IncTick+0x20>)
 800120e:	601a      	str	r2, [r3, #0]
}
 8001210:	46c0      	nop			; (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	20000008 	.word	0x20000008
 800121c:	2000009c 	.word	0x2000009c

08001220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b02      	ldr	r3, [pc, #8]	; (8001230 <HAL_GetTick+0x10>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	0018      	movs	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	2000009c 	.word	0x2000009c

08001234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800123c:	f7ff fff0 	bl	8001220 <HAL_GetTick>
 8001240:	0003      	movs	r3, r0
 8001242:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	3301      	adds	r3, #1
 800124c:	d005      	beq.n	800125a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <HAL_Delay+0x44>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	001a      	movs	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	189b      	adds	r3, r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	f7ff ffe0 	bl	8001220 <HAL_GetTick>
 8001260:	0002      	movs	r2, r0
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	429a      	cmp	r2, r3
 800126a:	d8f7      	bhi.n	800125c <HAL_Delay+0x28>
  {
  }
}
 800126c:	46c0      	nop			; (mov r8, r8)
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	b004      	add	sp, #16
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	20000008 	.word	0x20000008

0800127c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e159      	b.n	8001542 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10a      	bne.n	80012ac <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2250      	movs	r2, #80	; 0x50
 80012a0:	2100      	movs	r1, #0
 80012a2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	0018      	movs	r0, r3
 80012a8:	f7ff feba 	bl	8001020 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b0:	2210      	movs	r2, #16
 80012b2:	4013      	ands	r3, r2
 80012b4:	2b10      	cmp	r3, #16
 80012b6:	d005      	beq.n	80012c4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	2204      	movs	r2, #4
 80012c0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80012c2:	d00b      	beq.n	80012dc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c8:	2210      	movs	r2, #16
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2250      	movs	r2, #80	; 0x50
 80012d4:	2100      	movs	r1, #0
 80012d6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e132      	b.n	8001542 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e0:	4a9a      	ldr	r2, [pc, #616]	; (800154c <HAL_ADC_Init+0x2d0>)
 80012e2:	4013      	ands	r3, r2
 80012e4:	2202      	movs	r2, #2
 80012e6:	431a      	orrs	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	2203      	movs	r2, #3
 80012f4:	4013      	ands	r3, r2
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d108      	bne.n	800130c <HAL_ADC_Init+0x90>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2201      	movs	r2, #1
 8001302:	4013      	ands	r3, r2
 8001304:	2b01      	cmp	r3, #1
 8001306:	d101      	bne.n	800130c <HAL_ADC_Init+0x90>
 8001308:	2301      	movs	r3, #1
 800130a:	e000      	b.n	800130e <HAL_ADC_Init+0x92>
 800130c:	2300      	movs	r3, #0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d149      	bne.n	80013a6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	23c0      	movs	r3, #192	; 0xc0
 8001318:	061b      	lsls	r3, r3, #24
 800131a:	429a      	cmp	r2, r3
 800131c:	d00b      	beq.n	8001336 <HAL_ADC_Init+0xba>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	05db      	lsls	r3, r3, #23
 8001326:	429a      	cmp	r2, r3
 8001328:	d005      	beq.n	8001336 <HAL_ADC_Init+0xba>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	061b      	lsls	r3, r3, #24
 8001332:	429a      	cmp	r2, r3
 8001334:	d111      	bne.n	800135a <HAL_ADC_Init+0xde>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	691a      	ldr	r2, [r3, #16]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	0092      	lsls	r2, r2, #2
 8001342:	0892      	lsrs	r2, r2, #2
 8001344:	611a      	str	r2, [r3, #16]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6919      	ldr	r1, [r3, #16]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	430a      	orrs	r2, r1
 8001356:	611a      	str	r2, [r3, #16]
 8001358:	e014      	b.n	8001384 <HAL_ADC_Init+0x108>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	691a      	ldr	r2, [r3, #16]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	0092      	lsls	r2, r2, #2
 8001366:	0892      	lsrs	r2, r2, #2
 8001368:	611a      	str	r2, [r3, #16]
 800136a:	4b79      	ldr	r3, [pc, #484]	; (8001550 <HAL_ADC_Init+0x2d4>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4b78      	ldr	r3, [pc, #480]	; (8001550 <HAL_ADC_Init+0x2d4>)
 8001370:	4978      	ldr	r1, [pc, #480]	; (8001554 <HAL_ADC_Init+0x2d8>)
 8001372:	400a      	ands	r2, r1
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	4b76      	ldr	r3, [pc, #472]	; (8001550 <HAL_ADC_Init+0x2d4>)
 8001378:	6819      	ldr	r1, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	4b74      	ldr	r3, [pc, #464]	; (8001550 <HAL_ADC_Init+0x2d4>)
 8001380:	430a      	orrs	r2, r1
 8001382:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68da      	ldr	r2, [r3, #12]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2118      	movs	r1, #24
 8001390:	438a      	bics	r2, r1
 8001392:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68d9      	ldr	r1, [r3, #12]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80013a6:	4b6a      	ldr	r3, [pc, #424]	; (8001550 <HAL_ADC_Init+0x2d4>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	4b69      	ldr	r3, [pc, #420]	; (8001550 <HAL_ADC_Init+0x2d4>)
 80013ac:	496a      	ldr	r1, [pc, #424]	; (8001558 <HAL_ADC_Init+0x2dc>)
 80013ae:	400a      	ands	r2, r1
 80013b0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80013b2:	4b67      	ldr	r3, [pc, #412]	; (8001550 <HAL_ADC_Init+0x2d4>)
 80013b4:	6819      	ldr	r1, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ba:	065a      	lsls	r2, r3, #25
 80013bc:	4b64      	ldr	r3, [pc, #400]	; (8001550 <HAL_ADC_Init+0x2d4>)
 80013be:	430a      	orrs	r2, r1
 80013c0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	055b      	lsls	r3, r3, #21
 80013cc:	4013      	ands	r3, r2
 80013ce:	d108      	bne.n	80013e2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2180      	movs	r1, #128	; 0x80
 80013dc:	0549      	lsls	r1, r1, #21
 80013de:	430a      	orrs	r2, r1
 80013e0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68da      	ldr	r2, [r3, #12]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	495b      	ldr	r1, [pc, #364]	; (800155c <HAL_ADC_Init+0x2e0>)
 80013ee:	400a      	ands	r2, r1
 80013f0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68d9      	ldr	r1, [r3, #12]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d101      	bne.n	8001408 <HAL_ADC_Init+0x18c>
 8001404:	2304      	movs	r3, #4
 8001406:	e000      	b.n	800140a <HAL_ADC_Init+0x18e>
 8001408:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800140a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2020      	movs	r0, #32
 8001410:	5c1b      	ldrb	r3, [r3, r0]
 8001412:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001414:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	202c      	movs	r0, #44	; 0x2c
 800141a:	5c1b      	ldrb	r3, [r3, r0]
 800141c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800141e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001424:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800142c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001434:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001442:	23c2      	movs	r3, #194	; 0xc2
 8001444:	33ff      	adds	r3, #255	; 0xff
 8001446:	429a      	cmp	r2, r3
 8001448:	d00b      	beq.n	8001462 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68d9      	ldr	r1, [r3, #12]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001458:	431a      	orrs	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	430a      	orrs	r2, r1
 8001460:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2221      	movs	r2, #33	; 0x21
 8001466:	5c9b      	ldrb	r3, [r3, r2]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d11a      	bne.n	80014a2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2220      	movs	r2, #32
 8001470:	5c9b      	ldrb	r3, [r3, r2]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d109      	bne.n	800148a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2180      	movs	r1, #128	; 0x80
 8001482:	0249      	lsls	r1, r1, #9
 8001484:	430a      	orrs	r2, r1
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	e00b      	b.n	80014a2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800148e:	2220      	movs	r2, #32
 8001490:	431a      	orrs	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149a:	2201      	movs	r2, #1
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d11f      	bne.n	80014ea <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	691a      	ldr	r2, [r3, #16]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	492a      	ldr	r1, [pc, #168]	; (8001560 <HAL_ADC_Init+0x2e4>)
 80014b6:	400a      	ands	r2, r1
 80014b8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6919      	ldr	r1, [r3, #16]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80014c8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80014ce:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	691a      	ldr	r2, [r3, #16]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2101      	movs	r1, #1
 80014e4:	430a      	orrs	r2, r1
 80014e6:	611a      	str	r2, [r3, #16]
 80014e8:	e00e      	b.n	8001508 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	2201      	movs	r2, #1
 80014f2:	4013      	ands	r3, r2
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d107      	bne.n	8001508 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	691a      	ldr	r2, [r3, #16]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2101      	movs	r1, #1
 8001504:	438a      	bics	r2, r1
 8001506:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	695a      	ldr	r2, [r3, #20]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2107      	movs	r1, #7
 8001514:	438a      	bics	r2, r1
 8001516:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6959      	ldr	r1, [r3, #20]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001534:	2203      	movs	r2, #3
 8001536:	4393      	bics	r3, r2
 8001538:	2201      	movs	r2, #1
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	0018      	movs	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	b002      	add	sp, #8
 8001548:	bd80      	pop	{r7, pc}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	fffffefd 	.word	0xfffffefd
 8001550:	40012708 	.word	0x40012708
 8001554:	ffc3ffff 	.word	0xffc3ffff
 8001558:	fdffffff 	.word	0xfdffffff
 800155c:	fffe0219 	.word	0xfffe0219
 8001560:	fffffc03 	.word	0xfffffc03

08001564 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2250      	movs	r2, #80	; 0x50
 8001572:	5c9b      	ldrb	r3, [r3, r2]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d101      	bne.n	800157c <HAL_ADC_ConfigChannel+0x18>
 8001578:	2302      	movs	r3, #2
 800157a:	e06c      	b.n	8001656 <HAL_ADC_ConfigChannel+0xf2>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2250      	movs	r2, #80	; 0x50
 8001580:	2101      	movs	r1, #1
 8001582:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2204      	movs	r2, #4
 800158c:	4013      	ands	r3, r2
 800158e:	d00b      	beq.n	80015a8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001594:	2220      	movs	r2, #32
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2250      	movs	r2, #80	; 0x50
 80015a0:	2100      	movs	r1, #0
 80015a2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e056      	b.n	8001656 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	4a2c      	ldr	r2, [pc, #176]	; (8001660 <HAL_ADC_ConfigChannel+0xfc>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d028      	beq.n	8001604 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	035b      	lsls	r3, r3, #13
 80015be:	0b5a      	lsrs	r2, r3, #13
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	02db      	lsls	r3, r3, #11
 80015d0:	4013      	ands	r3, r2
 80015d2:	d009      	beq.n	80015e8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80015d4:	4b23      	ldr	r3, [pc, #140]	; (8001664 <HAL_ADC_ConfigChannel+0x100>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b22      	ldr	r3, [pc, #136]	; (8001664 <HAL_ADC_ConfigChannel+0x100>)
 80015da:	2180      	movs	r1, #128	; 0x80
 80015dc:	0409      	lsls	r1, r1, #16
 80015de:	430a      	orrs	r2, r1
 80015e0:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80015e2:	200a      	movs	r0, #10
 80015e4:	f000 f844 	bl	8001670 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	029b      	lsls	r3, r3, #10
 80015f0:	4013      	ands	r3, r2
 80015f2:	d02b      	beq.n	800164c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <HAL_ADC_ConfigChannel+0x100>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <HAL_ADC_ConfigChannel+0x100>)
 80015fa:	2180      	movs	r1, #128	; 0x80
 80015fc:	03c9      	lsls	r1, r1, #15
 80015fe:	430a      	orrs	r2, r1
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	e023      	b.n	800164c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	035b      	lsls	r3, r3, #13
 8001610:	0b5b      	lsrs	r3, r3, #13
 8001612:	43d9      	mvns	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	400a      	ands	r2, r1
 800161a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	2380      	movs	r3, #128	; 0x80
 8001622:	02db      	lsls	r3, r3, #11
 8001624:	4013      	ands	r3, r2
 8001626:	d005      	beq.n	8001634 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8001628:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <HAL_ADC_ConfigChannel+0x100>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <HAL_ADC_ConfigChannel+0x100>)
 800162e:	490e      	ldr	r1, [pc, #56]	; (8001668 <HAL_ADC_ConfigChannel+0x104>)
 8001630:	400a      	ands	r2, r1
 8001632:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	029b      	lsls	r3, r3, #10
 800163c:	4013      	ands	r3, r2
 800163e:	d005      	beq.n	800164c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <HAL_ADC_ConfigChannel+0x100>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <HAL_ADC_ConfigChannel+0x100>)
 8001646:	4909      	ldr	r1, [pc, #36]	; (800166c <HAL_ADC_ConfigChannel+0x108>)
 8001648:	400a      	ands	r2, r1
 800164a:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2250      	movs	r2, #80	; 0x50
 8001650:	2100      	movs	r1, #0
 8001652:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	0018      	movs	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	b002      	add	sp, #8
 800165c:	bd80      	pop	{r7, pc}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	00001001 	.word	0x00001001
 8001664:	40012708 	.word	0x40012708
 8001668:	ff7fffff 	.word	0xff7fffff
 800166c:	ffbfffff 	.word	0xffbfffff

08001670 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <ADC_DelayMicroSecond+0x38>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	490b      	ldr	r1, [pc, #44]	; (80016ac <ADC_DelayMicroSecond+0x3c>)
 800167e:	0018      	movs	r0, r3
 8001680:	f7fe fd42 	bl	8000108 <__udivsi3>
 8001684:	0003      	movs	r3, r0
 8001686:	001a      	movs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4353      	muls	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800168e:	e002      	b.n	8001696 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	3b01      	subs	r3, #1
 8001694:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f9      	bne.n	8001690 <ADC_DelayMicroSecond+0x20>
  } 
}
 800169c:	46c0      	nop			; (mov r8, r8)
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b004      	add	sp, #16
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	20000000 	.word	0x20000000
 80016ac:	000f4240 	.word	0x000f4240

080016b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	0002      	movs	r2, r0
 80016b8:	6039      	str	r1, [r7, #0]
 80016ba:	1dfb      	adds	r3, r7, #7
 80016bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b7f      	cmp	r3, #127	; 0x7f
 80016c4:	d828      	bhi.n	8001718 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016c6:	4a2f      	ldr	r2, [pc, #188]	; (8001784 <__NVIC_SetPriority+0xd4>)
 80016c8:	1dfb      	adds	r3, r7, #7
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	b25b      	sxtb	r3, r3
 80016ce:	089b      	lsrs	r3, r3, #2
 80016d0:	33c0      	adds	r3, #192	; 0xc0
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	589b      	ldr	r3, [r3, r2]
 80016d6:	1dfa      	adds	r2, r7, #7
 80016d8:	7812      	ldrb	r2, [r2, #0]
 80016da:	0011      	movs	r1, r2
 80016dc:	2203      	movs	r2, #3
 80016de:	400a      	ands	r2, r1
 80016e0:	00d2      	lsls	r2, r2, #3
 80016e2:	21ff      	movs	r1, #255	; 0xff
 80016e4:	4091      	lsls	r1, r2
 80016e6:	000a      	movs	r2, r1
 80016e8:	43d2      	mvns	r2, r2
 80016ea:	401a      	ands	r2, r3
 80016ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	019b      	lsls	r3, r3, #6
 80016f2:	22ff      	movs	r2, #255	; 0xff
 80016f4:	401a      	ands	r2, r3
 80016f6:	1dfb      	adds	r3, r7, #7
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	0018      	movs	r0, r3
 80016fc:	2303      	movs	r3, #3
 80016fe:	4003      	ands	r3, r0
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001704:	481f      	ldr	r0, [pc, #124]	; (8001784 <__NVIC_SetPriority+0xd4>)
 8001706:	1dfb      	adds	r3, r7, #7
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b25b      	sxtb	r3, r3
 800170c:	089b      	lsrs	r3, r3, #2
 800170e:	430a      	orrs	r2, r1
 8001710:	33c0      	adds	r3, #192	; 0xc0
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001716:	e031      	b.n	800177c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001718:	4a1b      	ldr	r2, [pc, #108]	; (8001788 <__NVIC_SetPriority+0xd8>)
 800171a:	1dfb      	adds	r3, r7, #7
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	0019      	movs	r1, r3
 8001720:	230f      	movs	r3, #15
 8001722:	400b      	ands	r3, r1
 8001724:	3b08      	subs	r3, #8
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	3306      	adds	r3, #6
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	18d3      	adds	r3, r2, r3
 800172e:	3304      	adds	r3, #4
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	1dfa      	adds	r2, r7, #7
 8001734:	7812      	ldrb	r2, [r2, #0]
 8001736:	0011      	movs	r1, r2
 8001738:	2203      	movs	r2, #3
 800173a:	400a      	ands	r2, r1
 800173c:	00d2      	lsls	r2, r2, #3
 800173e:	21ff      	movs	r1, #255	; 0xff
 8001740:	4091      	lsls	r1, r2
 8001742:	000a      	movs	r2, r1
 8001744:	43d2      	mvns	r2, r2
 8001746:	401a      	ands	r2, r3
 8001748:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	019b      	lsls	r3, r3, #6
 800174e:	22ff      	movs	r2, #255	; 0xff
 8001750:	401a      	ands	r2, r3
 8001752:	1dfb      	adds	r3, r7, #7
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	0018      	movs	r0, r3
 8001758:	2303      	movs	r3, #3
 800175a:	4003      	ands	r3, r0
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001760:	4809      	ldr	r0, [pc, #36]	; (8001788 <__NVIC_SetPriority+0xd8>)
 8001762:	1dfb      	adds	r3, r7, #7
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	001c      	movs	r4, r3
 8001768:	230f      	movs	r3, #15
 800176a:	4023      	ands	r3, r4
 800176c:	3b08      	subs	r3, #8
 800176e:	089b      	lsrs	r3, r3, #2
 8001770:	430a      	orrs	r2, r1
 8001772:	3306      	adds	r3, #6
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	18c3      	adds	r3, r0, r3
 8001778:	3304      	adds	r3, #4
 800177a:	601a      	str	r2, [r3, #0]
}
 800177c:	46c0      	nop			; (mov r8, r8)
 800177e:	46bd      	mov	sp, r7
 8001780:	b003      	add	sp, #12
 8001782:	bd90      	pop	{r4, r7, pc}
 8001784:	e000e100 	.word	0xe000e100
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	1e5a      	subs	r2, r3, #1
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	045b      	lsls	r3, r3, #17
 800179c:	429a      	cmp	r2, r3
 800179e:	d301      	bcc.n	80017a4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a0:	2301      	movs	r3, #1
 80017a2:	e010      	b.n	80017c6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <SysTick_Config+0x44>)
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	3a01      	subs	r2, #1
 80017aa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ac:	2301      	movs	r3, #1
 80017ae:	425b      	negs	r3, r3
 80017b0:	2103      	movs	r1, #3
 80017b2:	0018      	movs	r0, r3
 80017b4:	f7ff ff7c 	bl	80016b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <SysTick_Config+0x44>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017be:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <SysTick_Config+0x44>)
 80017c0:	2207      	movs	r2, #7
 80017c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	0018      	movs	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b002      	add	sp, #8
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	e000e010 	.word	0xe000e010

080017d4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	210f      	movs	r1, #15
 80017e0:	187b      	adds	r3, r7, r1
 80017e2:	1c02      	adds	r2, r0, #0
 80017e4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	187b      	adds	r3, r7, r1
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	0011      	movs	r1, r2
 80017f0:	0018      	movs	r0, r3
 80017f2:	f7ff ff5d 	bl	80016b0 <__NVIC_SetPriority>
}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b004      	add	sp, #16
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	0018      	movs	r0, r3
 800180a:	f7ff ffbf 	bl	800178c <SysTick_Config>
 800180e:	0003      	movs	r3, r0
}
 8001810:	0018      	movs	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	b002      	add	sp, #8
 8001816:	bd80      	pop	{r7, pc}

08001818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800182e:	e143      	b.n	8001ab8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2101      	movs	r1, #1
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	4091      	lsls	r1, r2
 800183a:	000a      	movs	r2, r1
 800183c:	4013      	ands	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d100      	bne.n	8001848 <HAL_GPIO_Init+0x30>
 8001846:	e134      	b.n	8001ab2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2203      	movs	r2, #3
 800184e:	4013      	ands	r3, r2
 8001850:	2b01      	cmp	r3, #1
 8001852:	d005      	beq.n	8001860 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2203      	movs	r2, #3
 800185a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800185c:	2b02      	cmp	r3, #2
 800185e:	d130      	bne.n	80018c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	2203      	movs	r2, #3
 800186c:	409a      	lsls	r2, r3
 800186e:	0013      	movs	r3, r2
 8001870:	43da      	mvns	r2, r3
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68da      	ldr	r2, [r3, #12]
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	409a      	lsls	r2, r3
 8001882:	0013      	movs	r3, r2
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001896:	2201      	movs	r2, #1
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	409a      	lsls	r2, r3
 800189c:	0013      	movs	r3, r2
 800189e:	43da      	mvns	r2, r3
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	091b      	lsrs	r3, r3, #4
 80018ac:	2201      	movs	r2, #1
 80018ae:	401a      	ands	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	409a      	lsls	r2, r3
 80018b4:	0013      	movs	r3, r2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2203      	movs	r2, #3
 80018c8:	4013      	ands	r3, r2
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d017      	beq.n	80018fe <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	2203      	movs	r2, #3
 80018da:	409a      	lsls	r2, r3
 80018dc:	0013      	movs	r3, r2
 80018de:	43da      	mvns	r2, r3
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	409a      	lsls	r2, r3
 80018f0:	0013      	movs	r3, r2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2203      	movs	r2, #3
 8001904:	4013      	ands	r3, r2
 8001906:	2b02      	cmp	r3, #2
 8001908:	d123      	bne.n	8001952 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	08da      	lsrs	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3208      	adds	r2, #8
 8001912:	0092      	lsls	r2, r2, #2
 8001914:	58d3      	ldr	r3, [r2, r3]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	2207      	movs	r2, #7
 800191c:	4013      	ands	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	220f      	movs	r2, #15
 8001922:	409a      	lsls	r2, r3
 8001924:	0013      	movs	r3, r2
 8001926:	43da      	mvns	r2, r3
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	691a      	ldr	r2, [r3, #16]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	2107      	movs	r1, #7
 8001936:	400b      	ands	r3, r1
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	409a      	lsls	r2, r3
 800193c:	0013      	movs	r3, r2
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	08da      	lsrs	r2, r3, #3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3208      	adds	r2, #8
 800194c:	0092      	lsls	r2, r2, #2
 800194e:	6939      	ldr	r1, [r7, #16]
 8001950:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	2203      	movs	r2, #3
 800195e:	409a      	lsls	r2, r3
 8001960:	0013      	movs	r3, r2
 8001962:	43da      	mvns	r2, r3
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2203      	movs	r2, #3
 8001970:	401a      	ands	r2, r3
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	409a      	lsls	r2, r3
 8001978:	0013      	movs	r3, r2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	23c0      	movs	r3, #192	; 0xc0
 800198c:	029b      	lsls	r3, r3, #10
 800198e:	4013      	ands	r3, r2
 8001990:	d100      	bne.n	8001994 <HAL_GPIO_Init+0x17c>
 8001992:	e08e      	b.n	8001ab2 <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001994:	4b4e      	ldr	r3, [pc, #312]	; (8001ad0 <HAL_GPIO_Init+0x2b8>)
 8001996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001998:	4b4d      	ldr	r3, [pc, #308]	; (8001ad0 <HAL_GPIO_Init+0x2b8>)
 800199a:	2101      	movs	r1, #1
 800199c:	430a      	orrs	r2, r1
 800199e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80019a0:	4a4c      	ldr	r2, [pc, #304]	; (8001ad4 <HAL_GPIO_Init+0x2bc>)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	089b      	lsrs	r3, r3, #2
 80019a6:	3302      	adds	r3, #2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	589b      	ldr	r3, [r3, r2]
 80019ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2203      	movs	r2, #3
 80019b2:	4013      	ands	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	220f      	movs	r2, #15
 80019b8:	409a      	lsls	r2, r3
 80019ba:	0013      	movs	r3, r2
 80019bc:	43da      	mvns	r2, r3
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	23a0      	movs	r3, #160	; 0xa0
 80019c8:	05db      	lsls	r3, r3, #23
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d00d      	beq.n	80019ea <HAL_GPIO_Init+0x1d2>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a41      	ldr	r2, [pc, #260]	; (8001ad8 <HAL_GPIO_Init+0x2c0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d007      	beq.n	80019e6 <HAL_GPIO_Init+0x1ce>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a40      	ldr	r2, [pc, #256]	; (8001adc <HAL_GPIO_Init+0x2c4>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d101      	bne.n	80019e2 <HAL_GPIO_Init+0x1ca>
 80019de:	2302      	movs	r3, #2
 80019e0:	e004      	b.n	80019ec <HAL_GPIO_Init+0x1d4>
 80019e2:	2306      	movs	r3, #6
 80019e4:	e002      	b.n	80019ec <HAL_GPIO_Init+0x1d4>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_GPIO_Init+0x1d4>
 80019ea:	2300      	movs	r3, #0
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	2103      	movs	r1, #3
 80019f0:	400a      	ands	r2, r1
 80019f2:	0092      	lsls	r2, r2, #2
 80019f4:	4093      	lsls	r3, r2
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019fc:	4935      	ldr	r1, [pc, #212]	; (8001ad4 <HAL_GPIO_Init+0x2bc>)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	089b      	lsrs	r3, r3, #2
 8001a02:	3302      	adds	r3, #2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a0a:	4b35      	ldr	r3, [pc, #212]	; (8001ae0 <HAL_GPIO_Init+0x2c8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	43da      	mvns	r2, r3
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	4013      	ands	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	025b      	lsls	r3, r3, #9
 8001a22:	4013      	ands	r3, r2
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <HAL_GPIO_Init+0x2c8>)
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001a34:	4b2a      	ldr	r3, [pc, #168]	; (8001ae0 <HAL_GPIO_Init+0x2c8>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	43da      	mvns	r2, r3
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	029b      	lsls	r3, r3, #10
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a58:	4b21      	ldr	r3, [pc, #132]	; (8001ae0 <HAL_GPIO_Init+0x2c8>)
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a5e:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <HAL_GPIO_Init+0x2c8>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	43da      	mvns	r2, r3
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	035b      	lsls	r3, r3, #13
 8001a76:	4013      	ands	r3, r2
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a82:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <HAL_GPIO_Init+0x2c8>)
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a88:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <HAL_GPIO_Init+0x2c8>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	43da      	mvns	r2, r3
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	039b      	lsls	r3, r3, #14
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <HAL_GPIO_Init+0x2c8>)
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	40da      	lsrs	r2, r3
 8001ac0:	1e13      	subs	r3, r2, #0
 8001ac2:	d000      	beq.n	8001ac6 <HAL_GPIO_Init+0x2ae>
 8001ac4:	e6b4      	b.n	8001830 <HAL_GPIO_Init+0x18>
  }
}
 8001ac6:	46c0      	nop			; (mov r8, r8)
 8001ac8:	46c0      	nop			; (mov r8, r8)
 8001aca:	46bd      	mov	sp, r7
 8001acc:	b006      	add	sp, #24
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40010000 	.word	0x40010000
 8001ad8:	50000400 	.word	0x50000400
 8001adc:	50000800 	.word	0x50000800
 8001ae0:	40010400 	.word	0x40010400

08001ae4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	0008      	movs	r0, r1
 8001aee:	0011      	movs	r1, r2
 8001af0:	1cbb      	adds	r3, r7, #2
 8001af2:	1c02      	adds	r2, r0, #0
 8001af4:	801a      	strh	r2, [r3, #0]
 8001af6:	1c7b      	adds	r3, r7, #1
 8001af8:	1c0a      	adds	r2, r1, #0
 8001afa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001afc:	1c7b      	adds	r3, r7, #1
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d004      	beq.n	8001b0e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b04:	1cbb      	adds	r3, r7, #2
 8001b06:	881a      	ldrh	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001b0c:	e003      	b.n	8001b16 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001b0e:	1cbb      	adds	r3, r7, #2
 8001b10:	881a      	ldrh	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	b002      	add	sp, #8
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b28:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <HAL_I2CEx_EnableFastModePlus+0x28>)
 8001b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_I2CEx_EnableFastModePlus+0x28>)
 8001b2e:	2101      	movs	r1, #1
 8001b30:	430a      	orrs	r2, r1
 8001b32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR2, (uint32_t)ConfigFastModePlus);
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_I2CEx_EnableFastModePlus+0x2c>)
 8001b36:	6859      	ldr	r1, [r3, #4]
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <HAL_I2CEx_EnableFastModePlus+0x2c>)
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	605a      	str	r2, [r3, #4]
}
 8001b40:	46c0      	nop			; (mov r8, r8)
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b002      	add	sp, #8
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40010000 	.word	0x40010000

08001b50 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 8001b58:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <HAL_PWR_ConfigPVD+0xb8>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	22e0      	movs	r2, #224	; 0xe0
 8001b5e:	4393      	bics	r3, r2
 8001b60:	0019      	movs	r1, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <HAL_PWR_ConfigPVD+0xb8>)
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8001b6c:	4b27      	ldr	r3, [pc, #156]	; (8001c0c <HAL_PWR_ConfigPVD+0xbc>)
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <HAL_PWR_ConfigPVD+0xbc>)
 8001b72:	4927      	ldr	r1, [pc, #156]	; (8001c10 <HAL_PWR_ConfigPVD+0xc0>)
 8001b74:	400a      	ands	r2, r1
 8001b76:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8001b78:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <HAL_PWR_ConfigPVD+0xbc>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <HAL_PWR_ConfigPVD+0xbc>)
 8001b7e:	4924      	ldr	r1, [pc, #144]	; (8001c10 <HAL_PWR_ConfigPVD+0xc0>)
 8001b80:	400a      	ands	r2, r1
 8001b82:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8001b84:	4b21      	ldr	r3, [pc, #132]	; (8001c0c <HAL_PWR_ConfigPVD+0xbc>)
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <HAL_PWR_ConfigPVD+0xbc>)
 8001b8a:	4921      	ldr	r1, [pc, #132]	; (8001c10 <HAL_PWR_ConfigPVD+0xc0>)
 8001b8c:	400a      	ands	r2, r1
 8001b8e:	60da      	str	r2, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8001b90:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <HAL_PWR_ConfigPVD+0xbc>)
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <HAL_PWR_ConfigPVD+0xbc>)
 8001b96:	491e      	ldr	r1, [pc, #120]	; (8001c10 <HAL_PWR_ConfigPVD+0xc0>)
 8001b98:	400a      	ands	r2, r1
 8001b9a:	609a      	str	r2, [r3, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	025b      	lsls	r3, r3, #9
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d006      	beq.n	8001bb6 <HAL_PWR_ConfigPVD+0x66>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8001ba8:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <HAL_PWR_ConfigPVD+0xbc>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <HAL_PWR_ConfigPVD+0xbc>)
 8001bae:	2180      	movs	r1, #128	; 0x80
 8001bb0:	0249      	lsls	r1, r1, #9
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	601a      	str	r2, [r3, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	029b      	lsls	r3, r3, #10
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d006      	beq.n	8001bd0 <HAL_PWR_ConfigPVD+0x80>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_PWR_ConfigPVD+0xbc>)
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <HAL_PWR_ConfigPVD+0xbc>)
 8001bc8:	2180      	movs	r1, #128	; 0x80
 8001bca:	0249      	lsls	r1, r1, #9
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	605a      	str	r2, [r3, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d006      	beq.n	8001be8 <HAL_PWR_ConfigPVD+0x98>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <HAL_PWR_ConfigPVD+0xbc>)
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_PWR_ConfigPVD+0xbc>)
 8001be0:	2180      	movs	r1, #128	; 0x80
 8001be2:	0249      	lsls	r1, r1, #9
 8001be4:	430a      	orrs	r2, r1
 8001be6:	609a      	str	r2, [r3, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2202      	movs	r2, #2
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d006      	beq.n	8001c00 <HAL_PWR_ConfigPVD+0xb0>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_PWR_ConfigPVD+0xbc>)
 8001bf4:	68da      	ldr	r2, [r3, #12]
 8001bf6:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <HAL_PWR_ConfigPVD+0xbc>)
 8001bf8:	2180      	movs	r1, #128	; 0x80
 8001bfa:	0249      	lsls	r1, r1, #9
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	60da      	str	r2, [r3, #12]
  }
}
 8001c00:	46c0      	nop			; (mov r8, r8)
 8001c02:	46bd      	mov	sp, r7
 8001c04:	b002      	add	sp, #8
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40007000 	.word	0x40007000
 8001c0c:	40010400 	.word	0x40010400
 8001c10:	fffeffff 	.word	0xfffeffff

08001c14 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR, PWR_CR_PVDE);
 8001c18:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <HAL_PWR_EnablePVD+0x18>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <HAL_PWR_EnablePVD+0x18>)
 8001c1e:	2110      	movs	r1, #16
 8001c20:	430a      	orrs	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]
}
 8001c24:	46c0      	nop			; (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	40007000 	.word	0x40007000

08001c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c30:	b5b0      	push	{r4, r5, r7, lr}
 8001c32:	b08a      	sub	sp, #40	; 0x28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d102      	bne.n	8001c44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	f000 fb6c 	bl	800231c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c44:	4bc8      	ldr	r3, [pc, #800]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	220c      	movs	r2, #12
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c4e:	4bc6      	ldr	r3, [pc, #792]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	025b      	lsls	r3, r3, #9
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	4013      	ands	r3, r2
 8001c62:	d100      	bne.n	8001c66 <HAL_RCC_OscConfig+0x36>
 8001c64:	e07d      	b.n	8001d62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d007      	beq.n	8001c7c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	2b0c      	cmp	r3, #12
 8001c70:	d112      	bne.n	8001c98 <HAL_RCC_OscConfig+0x68>
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	025b      	lsls	r3, r3, #9
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d10d      	bne.n	8001c98 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7c:	4bba      	ldr	r3, [pc, #744]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	029b      	lsls	r3, r3, #10
 8001c84:	4013      	ands	r3, r2
 8001c86:	d100      	bne.n	8001c8a <HAL_RCC_OscConfig+0x5a>
 8001c88:	e06a      	b.n	8001d60 <HAL_RCC_OscConfig+0x130>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d166      	bne.n	8001d60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	f000 fb42 	bl	800231c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	025b      	lsls	r3, r3, #9
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d107      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x84>
 8001ca4:	4bb0      	ldr	r3, [pc, #704]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4baf      	ldr	r3, [pc, #700]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001caa:	2180      	movs	r1, #128	; 0x80
 8001cac:	0249      	lsls	r1, r1, #9
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	e027      	b.n	8001d04 <HAL_RCC_OscConfig+0xd4>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	23a0      	movs	r3, #160	; 0xa0
 8001cba:	02db      	lsls	r3, r3, #11
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d10e      	bne.n	8001cde <HAL_RCC_OscConfig+0xae>
 8001cc0:	4ba9      	ldr	r3, [pc, #676]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4ba8      	ldr	r3, [pc, #672]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001cc6:	2180      	movs	r1, #128	; 0x80
 8001cc8:	02c9      	lsls	r1, r1, #11
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	4ba6      	ldr	r3, [pc, #664]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	4ba5      	ldr	r3, [pc, #660]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001cd4:	2180      	movs	r1, #128	; 0x80
 8001cd6:	0249      	lsls	r1, r1, #9
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	e012      	b.n	8001d04 <HAL_RCC_OscConfig+0xd4>
 8001cde:	4ba2      	ldr	r3, [pc, #648]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	4ba1      	ldr	r3, [pc, #644]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001ce4:	49a1      	ldr	r1, [pc, #644]	; (8001f6c <HAL_RCC_OscConfig+0x33c>)
 8001ce6:	400a      	ands	r2, r1
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	4b9f      	ldr	r3, [pc, #636]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	025b      	lsls	r3, r3, #9
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4b9b      	ldr	r3, [pc, #620]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b9a      	ldr	r3, [pc, #616]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001cfe:	499c      	ldr	r1, [pc, #624]	; (8001f70 <HAL_RCC_OscConfig+0x340>)
 8001d00:	400a      	ands	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d014      	beq.n	8001d36 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff fa88 	bl	8001220 <HAL_GetTick>
 8001d10:	0003      	movs	r3, r0
 8001d12:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d16:	f7ff fa83 	bl	8001220 <HAL_GetTick>
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b64      	cmp	r3, #100	; 0x64
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e2f9      	b.n	800231c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d28:	4b8f      	ldr	r3, [pc, #572]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	029b      	lsls	r3, r3, #10
 8001d30:	4013      	ands	r3, r2
 8001d32:	d0f0      	beq.n	8001d16 <HAL_RCC_OscConfig+0xe6>
 8001d34:	e015      	b.n	8001d62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d36:	f7ff fa73 	bl	8001220 <HAL_GetTick>
 8001d3a:	0003      	movs	r3, r0
 8001d3c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d40:	f7ff fa6e 	bl	8001220 <HAL_GetTick>
 8001d44:	0002      	movs	r2, r0
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b64      	cmp	r3, #100	; 0x64
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e2e4      	b.n	800231c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d52:	4b85      	ldr	r3, [pc, #532]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	029b      	lsls	r3, r3, #10
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x110>
 8001d5e:	e000      	b.n	8001d62 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d60:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2202      	movs	r2, #2
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d100      	bne.n	8001d6e <HAL_RCC_OscConfig+0x13e>
 8001d6c:	e099      	b.n	8001ea2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	2220      	movs	r2, #32
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d009      	beq.n	8001d90 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001d7c:	4b7a      	ldr	r3, [pc, #488]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b79      	ldr	r3, [pc, #484]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001d82:	2120      	movs	r1, #32
 8001d84:	430a      	orrs	r2, r1
 8001d86:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	4393      	bics	r3, r2
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d005      	beq.n	8001da2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	2b0c      	cmp	r3, #12
 8001d9a:	d13e      	bne.n	8001e1a <HAL_RCC_OscConfig+0x1ea>
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d13b      	bne.n	8001e1a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001da2:	4b71      	ldr	r3, [pc, #452]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2204      	movs	r2, #4
 8001da8:	4013      	ands	r3, r2
 8001daa:	d004      	beq.n	8001db6 <HAL_RCC_OscConfig+0x186>
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e2b2      	b.n	800231c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db6:	4b6c      	ldr	r3, [pc, #432]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4a6e      	ldr	r2, [pc, #440]	; (8001f74 <HAL_RCC_OscConfig+0x344>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	021a      	lsls	r2, r3, #8
 8001dc6:	4b68      	ldr	r3, [pc, #416]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001dcc:	4b66      	ldr	r3, [pc, #408]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2209      	movs	r2, #9
 8001dd2:	4393      	bics	r3, r2
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	4b64      	ldr	r3, [pc, #400]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dde:	f000 fbeb 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 8001de2:	0001      	movs	r1, r0
 8001de4:	4b60      	ldr	r3, [pc, #384]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	220f      	movs	r2, #15
 8001dec:	4013      	ands	r3, r2
 8001dee:	4a62      	ldr	r2, [pc, #392]	; (8001f78 <HAL_RCC_OscConfig+0x348>)
 8001df0:	5cd3      	ldrb	r3, [r2, r3]
 8001df2:	000a      	movs	r2, r1
 8001df4:	40da      	lsrs	r2, r3
 8001df6:	4b61      	ldr	r3, [pc, #388]	; (8001f7c <HAL_RCC_OscConfig+0x34c>)
 8001df8:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001dfa:	4b61      	ldr	r3, [pc, #388]	; (8001f80 <HAL_RCC_OscConfig+0x350>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2513      	movs	r5, #19
 8001e00:	197c      	adds	r4, r7, r5
 8001e02:	0018      	movs	r0, r3
 8001e04:	f7ff f9c6 	bl	8001194 <HAL_InitTick>
 8001e08:	0003      	movs	r3, r0
 8001e0a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001e0c:	197b      	adds	r3, r7, r5
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d046      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001e14:	197b      	adds	r3, r7, r5
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	e280      	b.n	800231c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d027      	beq.n	8001e70 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e20:	4b51      	ldr	r3, [pc, #324]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2209      	movs	r2, #9
 8001e26:	4393      	bics	r3, r2
 8001e28:	0019      	movs	r1, r3
 8001e2a:	4b4f      	ldr	r3, [pc, #316]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e32:	f7ff f9f5 	bl	8001220 <HAL_GetTick>
 8001e36:	0003      	movs	r3, r0
 8001e38:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e3c:	f7ff f9f0 	bl	8001220 <HAL_GetTick>
 8001e40:	0002      	movs	r2, r0
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e266      	b.n	800231c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e4e:	4b46      	ldr	r3, [pc, #280]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2204      	movs	r2, #4
 8001e54:	4013      	ands	r3, r2
 8001e56:	d0f1      	beq.n	8001e3c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e58:	4b43      	ldr	r3, [pc, #268]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	4a45      	ldr	r2, [pc, #276]	; (8001f74 <HAL_RCC_OscConfig+0x344>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	0019      	movs	r1, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	021a      	lsls	r2, r3, #8
 8001e68:	4b3f      	ldr	r3, [pc, #252]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	e018      	b.n	8001ea2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e70:	4b3d      	ldr	r3, [pc, #244]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b3c      	ldr	r3, [pc, #240]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001e76:	2101      	movs	r1, #1
 8001e78:	438a      	bics	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7ff f9d0 	bl	8001220 <HAL_GetTick>
 8001e80:	0003      	movs	r3, r0
 8001e82:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e86:	f7ff f9cb 	bl	8001220 <HAL_GetTick>
 8001e8a:	0002      	movs	r2, r0
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e241      	b.n	800231c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e98:	4b33      	ldr	r3, [pc, #204]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2204      	movs	r2, #4
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d1f1      	bne.n	8001e86 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2210      	movs	r2, #16
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d100      	bne.n	8001eae <HAL_RCC_OscConfig+0x27e>
 8001eac:	e0a1      	b.n	8001ff2 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d140      	bne.n	8001f36 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001eb4:	4b2c      	ldr	r3, [pc, #176]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_OscConfig+0x29c>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e227      	b.n	800231c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ecc:	4b26      	ldr	r3, [pc, #152]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	4a2c      	ldr	r2, [pc, #176]	; (8001f84 <HAL_RCC_OscConfig+0x354>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	0019      	movs	r1, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1a      	ldr	r2, [r3, #32]
 8001eda:	4b23      	ldr	r3, [pc, #140]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001edc:	430a      	orrs	r2, r1
 8001ede:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ee0:	4b21      	ldr	r3, [pc, #132]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	0a19      	lsrs	r1, r3, #8
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	061a      	lsls	r2, r3, #24
 8001eee:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	0b5b      	lsrs	r3, r3, #13
 8001efa:	3301      	adds	r3, #1
 8001efc:	2280      	movs	r2, #128	; 0x80
 8001efe:	0212      	lsls	r2, r2, #8
 8001f00:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001f02:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	091b      	lsrs	r3, r3, #4
 8001f08:	210f      	movs	r1, #15
 8001f0a:	400b      	ands	r3, r1
 8001f0c:	491a      	ldr	r1, [pc, #104]	; (8001f78 <HAL_RCC_OscConfig+0x348>)
 8001f0e:	5ccb      	ldrb	r3, [r1, r3]
 8001f10:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f12:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <HAL_RCC_OscConfig+0x34c>)
 8001f14:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001f16:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <HAL_RCC_OscConfig+0x350>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2513      	movs	r5, #19
 8001f1c:	197c      	adds	r4, r7, r5
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f7ff f938 	bl	8001194 <HAL_InitTick>
 8001f24:	0003      	movs	r3, r0
 8001f26:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001f28:	197b      	adds	r3, r7, r5
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d060      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001f30:	197b      	adds	r3, r7, r5
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	e1f2      	b.n	800231c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d03f      	beq.n	8001fbe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <HAL_RCC_OscConfig+0x338>)
 8001f44:	2180      	movs	r1, #128	; 0x80
 8001f46:	0049      	lsls	r1, r1, #1
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4c:	f7ff f968 	bl	8001220 <HAL_GetTick>
 8001f50:	0003      	movs	r3, r0
 8001f52:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f54:	e018      	b.n	8001f88 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f56:	f7ff f963 	bl	8001220 <HAL_GetTick>
 8001f5a:	0002      	movs	r2, r0
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d911      	bls.n	8001f88 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e1d9      	b.n	800231c <HAL_RCC_OscConfig+0x6ec>
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	fffeffff 	.word	0xfffeffff
 8001f70:	fffbffff 	.word	0xfffbffff
 8001f74:	ffffe0ff 	.word	0xffffe0ff
 8001f78:	08002774 	.word	0x08002774
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	20000004 	.word	0x20000004
 8001f84:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f88:	4bc9      	ldr	r3, [pc, #804]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4013      	ands	r3, r2
 8001f92:	d0e0      	beq.n	8001f56 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f94:	4bc6      	ldr	r3, [pc, #792]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	4ac6      	ldr	r2, [pc, #792]	; (80022b4 <HAL_RCC_OscConfig+0x684>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a1a      	ldr	r2, [r3, #32]
 8001fa2:	4bc3      	ldr	r3, [pc, #780]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fa8:	4bc1      	ldr	r3, [pc, #772]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	021b      	lsls	r3, r3, #8
 8001fae:	0a19      	lsrs	r1, r3, #8
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	061a      	lsls	r2, r3, #24
 8001fb6:	4bbe      	ldr	r3, [pc, #760]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	605a      	str	r2, [r3, #4]
 8001fbc:	e019      	b.n	8001ff2 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fbe:	4bbc      	ldr	r3, [pc, #752]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	4bbb      	ldr	r3, [pc, #748]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 8001fc4:	49bc      	ldr	r1, [pc, #752]	; (80022b8 <HAL_RCC_OscConfig+0x688>)
 8001fc6:	400a      	ands	r2, r1
 8001fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fca:	f7ff f929 	bl	8001220 <HAL_GetTick>
 8001fce:	0003      	movs	r3, r0
 8001fd0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fd4:	f7ff f924 	bl	8001220 <HAL_GetTick>
 8001fd8:	0002      	movs	r2, r0
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e19a      	b.n	800231c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001fe6:	4bb2      	ldr	r3, [pc, #712]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2208      	movs	r2, #8
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d036      	beq.n	800206a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d019      	beq.n	8002038 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002004:	4baa      	ldr	r3, [pc, #680]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 8002006:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002008:	4ba9      	ldr	r3, [pc, #676]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 800200a:	2101      	movs	r1, #1
 800200c:	430a      	orrs	r2, r1
 800200e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002010:	f7ff f906 	bl	8001220 <HAL_GetTick>
 8002014:	0003      	movs	r3, r0
 8002016:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800201a:	f7ff f901 	bl	8001220 <HAL_GetTick>
 800201e:	0002      	movs	r2, r0
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e177      	b.n	800231c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800202c:	4ba0      	ldr	r3, [pc, #640]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 800202e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002030:	2202      	movs	r2, #2
 8002032:	4013      	ands	r3, r2
 8002034:	d0f1      	beq.n	800201a <HAL_RCC_OscConfig+0x3ea>
 8002036:	e018      	b.n	800206a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002038:	4b9d      	ldr	r3, [pc, #628]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 800203a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800203c:	4b9c      	ldr	r3, [pc, #624]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 800203e:	2101      	movs	r1, #1
 8002040:	438a      	bics	r2, r1
 8002042:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002044:	f7ff f8ec 	bl	8001220 <HAL_GetTick>
 8002048:	0003      	movs	r3, r0
 800204a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800204e:	f7ff f8e7 	bl	8001220 <HAL_GetTick>
 8002052:	0002      	movs	r2, r0
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e15d      	b.n	800231c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002060:	4b93      	ldr	r3, [pc, #588]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 8002062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002064:	2202      	movs	r2, #2
 8002066:	4013      	ands	r3, r2
 8002068:	d1f1      	bne.n	800204e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2204      	movs	r2, #4
 8002070:	4013      	ands	r3, r2
 8002072:	d100      	bne.n	8002076 <HAL_RCC_OscConfig+0x446>
 8002074:	e0ae      	b.n	80021d4 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002076:	2023      	movs	r0, #35	; 0x23
 8002078:	183b      	adds	r3, r7, r0
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800207e:	4b8c      	ldr	r3, [pc, #560]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 8002080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002082:	2380      	movs	r3, #128	; 0x80
 8002084:	055b      	lsls	r3, r3, #21
 8002086:	4013      	ands	r3, r2
 8002088:	d109      	bne.n	800209e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800208a:	4b89      	ldr	r3, [pc, #548]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 800208c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800208e:	4b88      	ldr	r3, [pc, #544]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 8002090:	2180      	movs	r1, #128	; 0x80
 8002092:	0549      	lsls	r1, r1, #21
 8002094:	430a      	orrs	r2, r1
 8002096:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002098:	183b      	adds	r3, r7, r0
 800209a:	2201      	movs	r2, #1
 800209c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209e:	4b87      	ldr	r3, [pc, #540]	; (80022bc <HAL_RCC_OscConfig+0x68c>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	4013      	ands	r3, r2
 80020a8:	d11a      	bne.n	80020e0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020aa:	4b84      	ldr	r3, [pc, #528]	; (80022bc <HAL_RCC_OscConfig+0x68c>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4b83      	ldr	r3, [pc, #524]	; (80022bc <HAL_RCC_OscConfig+0x68c>)
 80020b0:	2180      	movs	r1, #128	; 0x80
 80020b2:	0049      	lsls	r1, r1, #1
 80020b4:	430a      	orrs	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b8:	f7ff f8b2 	bl	8001220 <HAL_GetTick>
 80020bc:	0003      	movs	r3, r0
 80020be:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c2:	f7ff f8ad 	bl	8001220 <HAL_GetTick>
 80020c6:	0002      	movs	r2, r0
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b64      	cmp	r3, #100	; 0x64
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e123      	b.n	800231c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d4:	4b79      	ldr	r3, [pc, #484]	; (80022bc <HAL_RCC_OscConfig+0x68c>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4013      	ands	r3, r2
 80020de:	d0f0      	beq.n	80020c2 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d107      	bne.n	80020fc <HAL_RCC_OscConfig+0x4cc>
 80020ec:	4b70      	ldr	r3, [pc, #448]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 80020ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020f0:	4b6f      	ldr	r3, [pc, #444]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 80020f2:	2180      	movs	r1, #128	; 0x80
 80020f4:	0049      	lsls	r1, r1, #1
 80020f6:	430a      	orrs	r2, r1
 80020f8:	651a      	str	r2, [r3, #80]	; 0x50
 80020fa:	e031      	b.n	8002160 <HAL_RCC_OscConfig+0x530>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10c      	bne.n	800211e <HAL_RCC_OscConfig+0x4ee>
 8002104:	4b6a      	ldr	r3, [pc, #424]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 8002106:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002108:	4b69      	ldr	r3, [pc, #420]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 800210a:	496b      	ldr	r1, [pc, #428]	; (80022b8 <HAL_RCC_OscConfig+0x688>)
 800210c:	400a      	ands	r2, r1
 800210e:	651a      	str	r2, [r3, #80]	; 0x50
 8002110:	4b67      	ldr	r3, [pc, #412]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 8002112:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002114:	4b66      	ldr	r3, [pc, #408]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 8002116:	496a      	ldr	r1, [pc, #424]	; (80022c0 <HAL_RCC_OscConfig+0x690>)
 8002118:	400a      	ands	r2, r1
 800211a:	651a      	str	r2, [r3, #80]	; 0x50
 800211c:	e020      	b.n	8002160 <HAL_RCC_OscConfig+0x530>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	23a0      	movs	r3, #160	; 0xa0
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	429a      	cmp	r2, r3
 8002128:	d10e      	bne.n	8002148 <HAL_RCC_OscConfig+0x518>
 800212a:	4b61      	ldr	r3, [pc, #388]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 800212c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800212e:	4b60      	ldr	r3, [pc, #384]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 8002130:	2180      	movs	r1, #128	; 0x80
 8002132:	00c9      	lsls	r1, r1, #3
 8002134:	430a      	orrs	r2, r1
 8002136:	651a      	str	r2, [r3, #80]	; 0x50
 8002138:	4b5d      	ldr	r3, [pc, #372]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 800213a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800213c:	4b5c      	ldr	r3, [pc, #368]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 800213e:	2180      	movs	r1, #128	; 0x80
 8002140:	0049      	lsls	r1, r1, #1
 8002142:	430a      	orrs	r2, r1
 8002144:	651a      	str	r2, [r3, #80]	; 0x50
 8002146:	e00b      	b.n	8002160 <HAL_RCC_OscConfig+0x530>
 8002148:	4b59      	ldr	r3, [pc, #356]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 800214a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800214c:	4b58      	ldr	r3, [pc, #352]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 800214e:	495a      	ldr	r1, [pc, #360]	; (80022b8 <HAL_RCC_OscConfig+0x688>)
 8002150:	400a      	ands	r2, r1
 8002152:	651a      	str	r2, [r3, #80]	; 0x50
 8002154:	4b56      	ldr	r3, [pc, #344]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 8002156:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002158:	4b55      	ldr	r3, [pc, #340]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 800215a:	4959      	ldr	r1, [pc, #356]	; (80022c0 <HAL_RCC_OscConfig+0x690>)
 800215c:	400a      	ands	r2, r1
 800215e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d015      	beq.n	8002194 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002168:	f7ff f85a 	bl	8001220 <HAL_GetTick>
 800216c:	0003      	movs	r3, r0
 800216e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002170:	e009      	b.n	8002186 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7ff f855 	bl	8001220 <HAL_GetTick>
 8002176:	0002      	movs	r2, r0
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	4a51      	ldr	r2, [pc, #324]	; (80022c4 <HAL_RCC_OscConfig+0x694>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e0ca      	b.n	800231c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002186:	4b4a      	ldr	r3, [pc, #296]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 8002188:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800218a:	2380      	movs	r3, #128	; 0x80
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4013      	ands	r3, r2
 8002190:	d0ef      	beq.n	8002172 <HAL_RCC_OscConfig+0x542>
 8002192:	e014      	b.n	80021be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002194:	f7ff f844 	bl	8001220 <HAL_GetTick>
 8002198:	0003      	movs	r3, r0
 800219a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800219c:	e009      	b.n	80021b2 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800219e:	f7ff f83f 	bl	8001220 <HAL_GetTick>
 80021a2:	0002      	movs	r2, r0
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	4a46      	ldr	r2, [pc, #280]	; (80022c4 <HAL_RCC_OscConfig+0x694>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e0b4      	b.n	800231c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021b2:	4b3f      	ldr	r3, [pc, #252]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 80021b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021b6:	2380      	movs	r3, #128	; 0x80
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4013      	ands	r3, r2
 80021bc:	d1ef      	bne.n	800219e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021be:	2323      	movs	r3, #35	; 0x23
 80021c0:	18fb      	adds	r3, r7, r3
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d105      	bne.n	80021d4 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c8:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 80021ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021cc:	4b38      	ldr	r3, [pc, #224]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 80021ce:	493e      	ldr	r1, [pc, #248]	; (80022c8 <HAL_RCC_OscConfig+0x698>)
 80021d0:	400a      	ands	r2, r1
 80021d2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d100      	bne.n	80021de <HAL_RCC_OscConfig+0x5ae>
 80021dc:	e09d      	b.n	800231a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	2b0c      	cmp	r3, #12
 80021e2:	d100      	bne.n	80021e6 <HAL_RCC_OscConfig+0x5b6>
 80021e4:	e076      	b.n	80022d4 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d145      	bne.n	800227a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ee:	4b30      	ldr	r3, [pc, #192]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	4b2f      	ldr	r3, [pc, #188]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 80021f4:	4935      	ldr	r1, [pc, #212]	; (80022cc <HAL_RCC_OscConfig+0x69c>)
 80021f6:	400a      	ands	r2, r1
 80021f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fa:	f7ff f811 	bl	8001220 <HAL_GetTick>
 80021fe:	0003      	movs	r3, r0
 8002200:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002204:	f7ff f80c 	bl	8001220 <HAL_GetTick>
 8002208:	0002      	movs	r2, r0
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e082      	b.n	800231c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002216:	4b26      	ldr	r3, [pc, #152]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	049b      	lsls	r3, r3, #18
 800221e:	4013      	ands	r3, r2
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002222:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	4a2a      	ldr	r2, [pc, #168]	; (80022d0 <HAL_RCC_OscConfig+0x6a0>)
 8002228:	4013      	ands	r3, r2
 800222a:	0019      	movs	r1, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	431a      	orrs	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	431a      	orrs	r2, r3
 800223c:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 800223e:	430a      	orrs	r2, r1
 8002240:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002242:	4b1b      	ldr	r3, [pc, #108]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 8002248:	2180      	movs	r1, #128	; 0x80
 800224a:	0449      	lsls	r1, r1, #17
 800224c:	430a      	orrs	r2, r1
 800224e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7fe ffe6 	bl	8001220 <HAL_GetTick>
 8002254:	0003      	movs	r3, r0
 8002256:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225a:	f7fe ffe1 	bl	8001220 <HAL_GetTick>
 800225e:	0002      	movs	r2, r0
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e057      	b.n	800231c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800226c:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	049b      	lsls	r3, r3, #18
 8002274:	4013      	ands	r3, r2
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x62a>
 8002278:	e04f      	b.n	800231a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227a:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 8002280:	4912      	ldr	r1, [pc, #72]	; (80022cc <HAL_RCC_OscConfig+0x69c>)
 8002282:	400a      	ands	r2, r1
 8002284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002286:	f7fe ffcb 	bl	8001220 <HAL_GetTick>
 800228a:	0003      	movs	r3, r0
 800228c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002290:	f7fe ffc6 	bl	8001220 <HAL_GetTick>
 8002294:	0002      	movs	r2, r0
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e03c      	b.n	800231c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80022a2:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <HAL_RCC_OscConfig+0x680>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	049b      	lsls	r3, r3, #18
 80022aa:	4013      	ands	r3, r2
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x660>
 80022ae:	e034      	b.n	800231a <HAL_RCC_OscConfig+0x6ea>
 80022b0:	40021000 	.word	0x40021000
 80022b4:	ffff1fff 	.word	0xffff1fff
 80022b8:	fffffeff 	.word	0xfffffeff
 80022bc:	40007000 	.word	0x40007000
 80022c0:	fffffbff 	.word	0xfffffbff
 80022c4:	00001388 	.word	0x00001388
 80022c8:	efffffff 	.word	0xefffffff
 80022cc:	feffffff 	.word	0xfeffffff
 80022d0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e01d      	b.n	800231c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022e0:	4b10      	ldr	r3, [pc, #64]	; (8002324 <HAL_RCC_OscConfig+0x6f4>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	025b      	lsls	r3, r3, #9
 80022ec:	401a      	ands	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d10f      	bne.n	8002316 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	23f0      	movs	r3, #240	; 0xf0
 80022fa:	039b      	lsls	r3, r3, #14
 80022fc:	401a      	ands	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002302:	429a      	cmp	r2, r3
 8002304:	d107      	bne.n	8002316 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	23c0      	movs	r3, #192	; 0xc0
 800230a:	041b      	lsls	r3, r3, #16
 800230c:	401a      	ands	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002312:	429a      	cmp	r2, r3
 8002314:	d001      	beq.n	800231a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	0018      	movs	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	b00a      	add	sp, #40	; 0x28
 8002322:	bdb0      	pop	{r4, r5, r7, pc}
 8002324:	40021000 	.word	0x40021000

08002328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002328:	b5b0      	push	{r4, r5, r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e128      	b.n	800258e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800233c:	4b96      	ldr	r3, [pc, #600]	; (8002598 <HAL_RCC_ClockConfig+0x270>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2201      	movs	r2, #1
 8002342:	4013      	ands	r3, r2
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d91e      	bls.n	8002388 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b93      	ldr	r3, [pc, #588]	; (8002598 <HAL_RCC_ClockConfig+0x270>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2201      	movs	r2, #1
 8002350:	4393      	bics	r3, r2
 8002352:	0019      	movs	r1, r3
 8002354:	4b90      	ldr	r3, [pc, #576]	; (8002598 <HAL_RCC_ClockConfig+0x270>)
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800235c:	f7fe ff60 	bl	8001220 <HAL_GetTick>
 8002360:	0003      	movs	r3, r0
 8002362:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002364:	e009      	b.n	800237a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002366:	f7fe ff5b 	bl	8001220 <HAL_GetTick>
 800236a:	0002      	movs	r2, r0
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	4a8a      	ldr	r2, [pc, #552]	; (800259c <HAL_RCC_ClockConfig+0x274>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d901      	bls.n	800237a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e109      	b.n	800258e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237a:	4b87      	ldr	r3, [pc, #540]	; (8002598 <HAL_RCC_ClockConfig+0x270>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2201      	movs	r2, #1
 8002380:	4013      	ands	r3, r2
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d1ee      	bne.n	8002366 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2202      	movs	r2, #2
 800238e:	4013      	ands	r3, r2
 8002390:	d009      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002392:	4b83      	ldr	r3, [pc, #524]	; (80025a0 <HAL_RCC_ClockConfig+0x278>)
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	22f0      	movs	r2, #240	; 0xf0
 8002398:	4393      	bics	r3, r2
 800239a:	0019      	movs	r1, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	4b7f      	ldr	r3, [pc, #508]	; (80025a0 <HAL_RCC_ClockConfig+0x278>)
 80023a2:	430a      	orrs	r2, r1
 80023a4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2201      	movs	r2, #1
 80023ac:	4013      	ands	r3, r2
 80023ae:	d100      	bne.n	80023b2 <HAL_RCC_ClockConfig+0x8a>
 80023b0:	e089      	b.n	80024c6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d107      	bne.n	80023ca <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023ba:	4b79      	ldr	r3, [pc, #484]	; (80025a0 <HAL_RCC_ClockConfig+0x278>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	029b      	lsls	r3, r3, #10
 80023c2:	4013      	ands	r3, r2
 80023c4:	d120      	bne.n	8002408 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e0e1      	b.n	800258e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d107      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023d2:	4b73      	ldr	r3, [pc, #460]	; (80025a0 <HAL_RCC_ClockConfig+0x278>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	049b      	lsls	r3, r3, #18
 80023da:	4013      	ands	r3, r2
 80023dc:	d114      	bne.n	8002408 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e0d5      	b.n	800258e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d106      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023ea:	4b6d      	ldr	r3, [pc, #436]	; (80025a0 <HAL_RCC_ClockConfig+0x278>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2204      	movs	r2, #4
 80023f0:	4013      	ands	r3, r2
 80023f2:	d109      	bne.n	8002408 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0ca      	b.n	800258e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80023f8:	4b69      	ldr	r3, [pc, #420]	; (80025a0 <HAL_RCC_ClockConfig+0x278>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4013      	ands	r3, r2
 8002402:	d101      	bne.n	8002408 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0c2      	b.n	800258e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002408:	4b65      	ldr	r3, [pc, #404]	; (80025a0 <HAL_RCC_ClockConfig+0x278>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	2203      	movs	r2, #3
 800240e:	4393      	bics	r3, r2
 8002410:	0019      	movs	r1, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	4b62      	ldr	r3, [pc, #392]	; (80025a0 <HAL_RCC_ClockConfig+0x278>)
 8002418:	430a      	orrs	r2, r1
 800241a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800241c:	f7fe ff00 	bl	8001220 <HAL_GetTick>
 8002420:	0003      	movs	r3, r0
 8002422:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d111      	bne.n	8002450 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800242c:	e009      	b.n	8002442 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242e:	f7fe fef7 	bl	8001220 <HAL_GetTick>
 8002432:	0002      	movs	r2, r0
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	4a58      	ldr	r2, [pc, #352]	; (800259c <HAL_RCC_ClockConfig+0x274>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e0a5      	b.n	800258e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002442:	4b57      	ldr	r3, [pc, #348]	; (80025a0 <HAL_RCC_ClockConfig+0x278>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	220c      	movs	r2, #12
 8002448:	4013      	ands	r3, r2
 800244a:	2b08      	cmp	r3, #8
 800244c:	d1ef      	bne.n	800242e <HAL_RCC_ClockConfig+0x106>
 800244e:	e03a      	b.n	80024c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b03      	cmp	r3, #3
 8002456:	d111      	bne.n	800247c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002458:	e009      	b.n	800246e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800245a:	f7fe fee1 	bl	8001220 <HAL_GetTick>
 800245e:	0002      	movs	r2, r0
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	4a4d      	ldr	r2, [pc, #308]	; (800259c <HAL_RCC_ClockConfig+0x274>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e08f      	b.n	800258e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800246e:	4b4c      	ldr	r3, [pc, #304]	; (80025a0 <HAL_RCC_ClockConfig+0x278>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	220c      	movs	r2, #12
 8002474:	4013      	ands	r3, r2
 8002476:	2b0c      	cmp	r3, #12
 8002478:	d1ef      	bne.n	800245a <HAL_RCC_ClockConfig+0x132>
 800247a:	e024      	b.n	80024c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d11b      	bne.n	80024bc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002484:	e009      	b.n	800249a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002486:	f7fe fecb 	bl	8001220 <HAL_GetTick>
 800248a:	0002      	movs	r2, r0
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	4a42      	ldr	r2, [pc, #264]	; (800259c <HAL_RCC_ClockConfig+0x274>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e079      	b.n	800258e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800249a:	4b41      	ldr	r3, [pc, #260]	; (80025a0 <HAL_RCC_ClockConfig+0x278>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	220c      	movs	r2, #12
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d1ef      	bne.n	8002486 <HAL_RCC_ClockConfig+0x15e>
 80024a6:	e00e      	b.n	80024c6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a8:	f7fe feba 	bl	8001220 <HAL_GetTick>
 80024ac:	0002      	movs	r2, r0
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	4a3a      	ldr	r2, [pc, #232]	; (800259c <HAL_RCC_ClockConfig+0x274>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e068      	b.n	800258e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80024bc:	4b38      	ldr	r3, [pc, #224]	; (80025a0 <HAL_RCC_ClockConfig+0x278>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	220c      	movs	r2, #12
 80024c2:	4013      	ands	r3, r2
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024c6:	4b34      	ldr	r3, [pc, #208]	; (8002598 <HAL_RCC_ClockConfig+0x270>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2201      	movs	r2, #1
 80024cc:	4013      	ands	r3, r2
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d21e      	bcs.n	8002512 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d4:	4b30      	ldr	r3, [pc, #192]	; (8002598 <HAL_RCC_ClockConfig+0x270>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2201      	movs	r2, #1
 80024da:	4393      	bics	r3, r2
 80024dc:	0019      	movs	r1, r3
 80024de:	4b2e      	ldr	r3, [pc, #184]	; (8002598 <HAL_RCC_ClockConfig+0x270>)
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024e6:	f7fe fe9b 	bl	8001220 <HAL_GetTick>
 80024ea:	0003      	movs	r3, r0
 80024ec:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ee:	e009      	b.n	8002504 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f0:	f7fe fe96 	bl	8001220 <HAL_GetTick>
 80024f4:	0002      	movs	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	4a28      	ldr	r2, [pc, #160]	; (800259c <HAL_RCC_ClockConfig+0x274>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e044      	b.n	800258e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002504:	4b24      	ldr	r3, [pc, #144]	; (8002598 <HAL_RCC_ClockConfig+0x270>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2201      	movs	r2, #1
 800250a:	4013      	ands	r3, r2
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d1ee      	bne.n	80024f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2204      	movs	r2, #4
 8002518:	4013      	ands	r3, r2
 800251a:	d009      	beq.n	8002530 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800251c:	4b20      	ldr	r3, [pc, #128]	; (80025a0 <HAL_RCC_ClockConfig+0x278>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	4a20      	ldr	r2, [pc, #128]	; (80025a4 <HAL_RCC_ClockConfig+0x27c>)
 8002522:	4013      	ands	r3, r2
 8002524:	0019      	movs	r1, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <HAL_RCC_ClockConfig+0x278>)
 800252c:	430a      	orrs	r2, r1
 800252e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2208      	movs	r2, #8
 8002536:	4013      	ands	r3, r2
 8002538:	d00a      	beq.n	8002550 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800253a:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <HAL_RCC_ClockConfig+0x278>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	4a1a      	ldr	r2, [pc, #104]	; (80025a8 <HAL_RCC_ClockConfig+0x280>)
 8002540:	4013      	ands	r3, r2
 8002542:	0019      	movs	r1, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	00da      	lsls	r2, r3, #3
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <HAL_RCC_ClockConfig+0x278>)
 800254c:	430a      	orrs	r2, r1
 800254e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002550:	f000 f832 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 8002554:	0001      	movs	r1, r0
 8002556:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_RCC_ClockConfig+0x278>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	091b      	lsrs	r3, r3, #4
 800255c:	220f      	movs	r2, #15
 800255e:	4013      	ands	r3, r2
 8002560:	4a12      	ldr	r2, [pc, #72]	; (80025ac <HAL_RCC_ClockConfig+0x284>)
 8002562:	5cd3      	ldrb	r3, [r2, r3]
 8002564:	000a      	movs	r2, r1
 8002566:	40da      	lsrs	r2, r3
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 800256a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800256c:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <HAL_RCC_ClockConfig+0x28c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	250b      	movs	r5, #11
 8002572:	197c      	adds	r4, r7, r5
 8002574:	0018      	movs	r0, r3
 8002576:	f7fe fe0d 	bl	8001194 <HAL_InitTick>
 800257a:	0003      	movs	r3, r0
 800257c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800257e:	197b      	adds	r3, r7, r5
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002586:	197b      	adds	r3, r7, r5
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	e000      	b.n	800258e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	0018      	movs	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	b004      	add	sp, #16
 8002594:	bdb0      	pop	{r4, r5, r7, pc}
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	40022000 	.word	0x40022000
 800259c:	00001388 	.word	0x00001388
 80025a0:	40021000 	.word	0x40021000
 80025a4:	fffff8ff 	.word	0xfffff8ff
 80025a8:	ffffc7ff 	.word	0xffffc7ff
 80025ac:	08002774 	.word	0x08002774
 80025b0:	20000000 	.word	0x20000000
 80025b4:	20000004 	.word	0x20000004

080025b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b8:	b5b0      	push	{r4, r5, r7, lr}
 80025ba:	b08e      	sub	sp, #56	; 0x38
 80025bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80025be:	4b4c      	ldr	r3, [pc, #304]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025c6:	230c      	movs	r3, #12
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b0c      	cmp	r3, #12
 80025cc:	d014      	beq.n	80025f8 <HAL_RCC_GetSysClockFreq+0x40>
 80025ce:	d900      	bls.n	80025d2 <HAL_RCC_GetSysClockFreq+0x1a>
 80025d0:	e07b      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x112>
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d002      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x24>
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d00b      	beq.n	80025f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80025da:	e076      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80025dc:	4b44      	ldr	r3, [pc, #272]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2210      	movs	r2, #16
 80025e2:	4013      	ands	r3, r2
 80025e4:	d002      	beq.n	80025ec <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80025e6:	4b43      	ldr	r3, [pc, #268]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80025e8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80025ea:	e07c      	b.n	80026e6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80025ec:	4b42      	ldr	r3, [pc, #264]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x140>)
 80025ee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025f0:	e079      	b.n	80026e6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025f2:	4b42      	ldr	r3, [pc, #264]	; (80026fc <HAL_RCC_GetSysClockFreq+0x144>)
 80025f4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025f6:	e076      	b.n	80026e6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80025f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fa:	0c9a      	lsrs	r2, r3, #18
 80025fc:	230f      	movs	r3, #15
 80025fe:	401a      	ands	r2, r3
 8002600:	4b3f      	ldr	r3, [pc, #252]	; (8002700 <HAL_RCC_GetSysClockFreq+0x148>)
 8002602:	5c9b      	ldrb	r3, [r3, r2]
 8002604:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002608:	0d9a      	lsrs	r2, r3, #22
 800260a:	2303      	movs	r3, #3
 800260c:	4013      	ands	r3, r2
 800260e:	3301      	adds	r3, #1
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002612:	4b37      	ldr	r3, [pc, #220]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	025b      	lsls	r3, r3, #9
 800261a:	4013      	ands	r3, r2
 800261c:	d01a      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800261e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002620:	61bb      	str	r3, [r7, #24]
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
 8002626:	4a35      	ldr	r2, [pc, #212]	; (80026fc <HAL_RCC_GetSysClockFreq+0x144>)
 8002628:	2300      	movs	r3, #0
 800262a:	69b8      	ldr	r0, [r7, #24]
 800262c:	69f9      	ldr	r1, [r7, #28]
 800262e:	f7fd fe17 	bl	8000260 <__aeabi_lmul>
 8002632:	0002      	movs	r2, r0
 8002634:	000b      	movs	r3, r1
 8002636:	0010      	movs	r0, r2
 8002638:	0019      	movs	r1, r3
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f7fd fdeb 	bl	8000220 <__aeabi_uldivmod>
 800264a:	0002      	movs	r2, r0
 800264c:	000b      	movs	r3, r1
 800264e:	0013      	movs	r3, r2
 8002650:	637b      	str	r3, [r7, #52]	; 0x34
 8002652:	e037      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002654:	4b26      	ldr	r3, [pc, #152]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2210      	movs	r2, #16
 800265a:	4013      	ands	r3, r2
 800265c:	d01a      	beq.n	8002694 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800265e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	4a23      	ldr	r2, [pc, #140]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002668:	2300      	movs	r3, #0
 800266a:	68b8      	ldr	r0, [r7, #8]
 800266c:	68f9      	ldr	r1, [r7, #12]
 800266e:	f7fd fdf7 	bl	8000260 <__aeabi_lmul>
 8002672:	0002      	movs	r2, r0
 8002674:	000b      	movs	r3, r1
 8002676:	0010      	movs	r0, r2
 8002678:	0019      	movs	r1, r3
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	603b      	str	r3, [r7, #0]
 800267e:	2300      	movs	r3, #0
 8002680:	607b      	str	r3, [r7, #4]
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f7fd fdcb 	bl	8000220 <__aeabi_uldivmod>
 800268a:	0002      	movs	r2, r0
 800268c:	000b      	movs	r3, r1
 800268e:	0013      	movs	r3, r2
 8002690:	637b      	str	r3, [r7, #52]	; 0x34
 8002692:	e017      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002696:	0018      	movs	r0, r3
 8002698:	2300      	movs	r3, #0
 800269a:	0019      	movs	r1, r3
 800269c:	4a16      	ldr	r2, [pc, #88]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x140>)
 800269e:	2300      	movs	r3, #0
 80026a0:	f7fd fdde 	bl	8000260 <__aeabi_lmul>
 80026a4:	0002      	movs	r2, r0
 80026a6:	000b      	movs	r3, r1
 80026a8:	0010      	movs	r0, r2
 80026aa:	0019      	movs	r1, r3
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	001c      	movs	r4, r3
 80026b0:	2300      	movs	r3, #0
 80026b2:	001d      	movs	r5, r3
 80026b4:	0022      	movs	r2, r4
 80026b6:	002b      	movs	r3, r5
 80026b8:	f7fd fdb2 	bl	8000220 <__aeabi_uldivmod>
 80026bc:	0002      	movs	r2, r0
 80026be:	000b      	movs	r3, r1
 80026c0:	0013      	movs	r3, r2
 80026c2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80026c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026c8:	e00d      	b.n	80026e6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80026ca:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	0b5b      	lsrs	r3, r3, #13
 80026d0:	2207      	movs	r2, #7
 80026d2:	4013      	ands	r3, r2
 80026d4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	3301      	adds	r3, #1
 80026da:	2280      	movs	r2, #128	; 0x80
 80026dc:	0212      	lsls	r2, r2, #8
 80026de:	409a      	lsls	r2, r3
 80026e0:	0013      	movs	r3, r2
 80026e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026e4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80026e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80026e8:	0018      	movs	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b00e      	add	sp, #56	; 0x38
 80026ee:	bdb0      	pop	{r4, r5, r7, pc}
 80026f0:	40021000 	.word	0x40021000
 80026f4:	003d0900 	.word	0x003d0900
 80026f8:	00f42400 	.word	0x00f42400
 80026fc:	007a1200 	.word	0x007a1200
 8002700:	08002784 	.word	0x08002784

08002704 <__libc_init_array>:
 8002704:	b570      	push	{r4, r5, r6, lr}
 8002706:	2600      	movs	r6, #0
 8002708:	4d0c      	ldr	r5, [pc, #48]	; (800273c <__libc_init_array+0x38>)
 800270a:	4c0d      	ldr	r4, [pc, #52]	; (8002740 <__libc_init_array+0x3c>)
 800270c:	1b64      	subs	r4, r4, r5
 800270e:	10a4      	asrs	r4, r4, #2
 8002710:	42a6      	cmp	r6, r4
 8002712:	d109      	bne.n	8002728 <__libc_init_array+0x24>
 8002714:	2600      	movs	r6, #0
 8002716:	f000 f821 	bl	800275c <_init>
 800271a:	4d0a      	ldr	r5, [pc, #40]	; (8002744 <__libc_init_array+0x40>)
 800271c:	4c0a      	ldr	r4, [pc, #40]	; (8002748 <__libc_init_array+0x44>)
 800271e:	1b64      	subs	r4, r4, r5
 8002720:	10a4      	asrs	r4, r4, #2
 8002722:	42a6      	cmp	r6, r4
 8002724:	d105      	bne.n	8002732 <__libc_init_array+0x2e>
 8002726:	bd70      	pop	{r4, r5, r6, pc}
 8002728:	00b3      	lsls	r3, r6, #2
 800272a:	58eb      	ldr	r3, [r5, r3]
 800272c:	4798      	blx	r3
 800272e:	3601      	adds	r6, #1
 8002730:	e7ee      	b.n	8002710 <__libc_init_array+0xc>
 8002732:	00b3      	lsls	r3, r6, #2
 8002734:	58eb      	ldr	r3, [r5, r3]
 8002736:	4798      	blx	r3
 8002738:	3601      	adds	r6, #1
 800273a:	e7f2      	b.n	8002722 <__libc_init_array+0x1e>
 800273c:	08002798 	.word	0x08002798
 8002740:	08002798 	.word	0x08002798
 8002744:	08002798 	.word	0x08002798
 8002748:	0800279c 	.word	0x0800279c

0800274c <memset>:
 800274c:	0003      	movs	r3, r0
 800274e:	1882      	adds	r2, r0, r2
 8002750:	4293      	cmp	r3, r2
 8002752:	d100      	bne.n	8002756 <memset+0xa>
 8002754:	4770      	bx	lr
 8002756:	7019      	strb	r1, [r3, #0]
 8002758:	3301      	adds	r3, #1
 800275a:	e7f9      	b.n	8002750 <memset+0x4>

0800275c <_init>:
 800275c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002762:	bc08      	pop	{r3}
 8002764:	469e      	mov	lr, r3
 8002766:	4770      	bx	lr

08002768 <_fini>:
 8002768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800276e:	bc08      	pop	{r3}
 8002770:	469e      	mov	lr, r3
 8002772:	4770      	bx	lr
